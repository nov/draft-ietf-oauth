<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<rfc category='std' ipr='trust200902' obsoletes='5849' docName='draft-ietf-oauth-v2-22'>
  <?rfc strict='yes' ?>
  <?rfc toc='yes' ?>
  <?rfc tocdepth='3' ?>
  <?rfc symrefs='yes' ?>
  <?rfc sortrefs='yes' ?>
  <?rfc compact='yes' ?>
  <?rfc subcompact='yes' ?>

  
  <front>
    <title abbrev='OAuth 2.0'>The OAuth 2.0 Authorization Protocol</title>

    <author fullname='Eran Hammer-Lahav' surname='Hammer-Lahav' initials='E' role='editor'>
      <organization>Yahoo!</organization>
      <address>
        <email>eran@hueniverse.com</email>
        <uri>http://hueniverse.com</uri>
      </address>
    </author>
    <author fullname='David Recordon' surname='Recordon' initials='D'>
      <organization>Facebook</organization>
      <address>
        <email>dr@fb.com</email>
        <uri>http://www.davidrecordon.com/</uri>
      </address>
    </author>
    <author fullname='Dick Hardt' surname='Hardt' initials='D'>
      <organization>Microsoft</organization>
      <address>
        <email>dick.hardt@gmail.com</email>
        <uri>http://dickhardt.org/</uri>
      </address>
    </author>

    <date year='2011' />

    <abstract>
      <t>
        The OAuth 2.0 authorization protocol enables a third-party application to obtain limited
        access to an HTTP service, either on behalf of a resource owner by orchestrating an approval
        interaction between the resource owner and the HTTP service, or by allowing the third-party
        application to obtain access on its own behalf. This specification replaces and obsoletes
        the OAuth 1.0 protocol described in RFC 5849.
      </t>
    </abstract>
  </front>

  <middle>

    <section title='Introduction'>
      <t>
        In the traditional client-server authentication model, the client requests an access
        restricted resource (protected resource) on the server by authenticating with the server
        using the resource owner's credentials. In order to provide third-party applications access
        to restricted resources, the resource owner shares its credentials with the third-party.
        This creates several problems and limitations:
      </t>
      <t>
        <list style='symbols'>
          <t>
            Third-party applications are required to store the resource owner's credentials
            for future use, typically a password in clear-text.
          </t>
          <t>
            Servers are required to support password authentication, despite the security
            weaknesses created by passwords.
          </t>
          <t>
            Third-party applications gain overly broad access to the resource owner's protected
            resources, leaving resource owners without any ability to restrict duration or access
            to a limited subset of resources.
          </t>
          <t>
            Resource owners cannot revoke access to an individual third-party without revoking
            access to all third-parties, and must do so by changing their password.
          </t>
          <t>
            Compromise of any third-party application results in compromise of the end-userâ€™s
            password and all of the data protected by that password.
          </t>
        </list>
      </t>
      <t>
        OAuth addresses these issues by introducing an authorization layer and separating the role
        of the client from that of the resource owner. In OAuth, the client requests access to
        resources controlled by the resource owner and hosted by the resource server, and is issued
        a different set of credentials than those of the resource owner.
      </t>
      <t>
        Instead of using the resource owner's credentials to access protected resources, the client
        obtains an access token - a string denoting a specific scope, lifetime, and other access
        attributes. Access tokens are issued to third-party clients by an authorization server with
        the approval of the resource owner. The client uses the access token to access the
        protected resources hosted by the resource server.
      </t>
      <t>
        For example, an end-user (resource owner) can grant a printing service (client) access
        to her protected photos stored at a photo sharing service (resource server), without
        sharing her username and password with the printing service. Instead, she authenticates
        directly with a server trusted by the photo sharing service (authorization server) which
        issues the printing service delegation-specific credentials (access token).
      </t>
      <t>
        This specification is designed for use with HTTP <xref target='RFC2616' />. The use of
        OAuth with any transport protocol other than HTTP is undefined.
      </t>

      <section title='Roles'>
        <t>
          OAuth defines four roles:
        </t>
        <t>
          <list style='hanging'>
            <t hangText='resource owner'>
              <vspace />
              An entity capable of granting access to a protected resource (e.g. end-user).
            </t>
            <t hangText='resource server'>
              <vspace />
              The server hosting the protected resources, capable of accepting and responding to
              protected resource requests using access tokens.
            </t>
            <t hangText='client'>
              <vspace />
              An application making protected resource requests on behalf of the resource owner and
              with its authorization.
            </t>
            <t hangText='authorization server'>
              <vspace />
              The server issuing access tokens to the client after successfully authenticating the
              resource owner and obtaining authorization.
            </t>
          </list>
        </t>
        <t>
          The interaction between the authorization server and resource server is beyond the scope
          of this specification. The authorization server may be the same server as the resource
          server or a separate entity. A single authorization server may issue access tokens
          accepted by multiple resource servers.
        </t>
      </section>

      <section title='Protocol Flow'>
        <figure title='Abstract Protocol Flow' anchor='Figure-1'>
          <artwork>
            <![CDATA[
  +--------+                               +---------------+
  |        |--(A)- Authorization Request ->|   Resource    |
  |        |                               |     Owner     |
  |        |<-(B)-- Authorization Grant ---|               |
  |        |                               +---------------+
  |        |
  |        |                               +---------------+
  |        |--(C)-- Authorization Grant -->| Authorization |
  | Client |                               |     Server    |
  |        |<-(D)----- Access Token -------|               |
  |        |                               +---------------+
  |        |
  |        |                               +---------------+
  |        |--(E)----- Access Token ------>|    Resource   |
  |        |                               |     Server    |
  |        |<-(F)--- Protected Resource ---|               |
  +--------+                               +---------------+
]]>
          </artwork>
        </figure>
        <t>
          The abstract flow illustrated in <xref target='Figure-1' /> describes the interaction
          between the four roles and includes the following steps:
        </t>
        <t>
          <list style='format (%C)'>
            <t>
              The client requests authorization from the resource owner. The authorization request
              can be made directly to the resource owner (as shown), or preferably indirectly via
              the authorization server as an intermediary.
            </t>
            <t>
              The client receives an authorization grant which is a credential representing
              the resource owner's authorization, expressed using one of four grant types defined
              in this specification or using an extension grant type. The authorization grant type
              depends on the method used by the client to request authorization and the types
              supported by the authorization server.
            </t>
            <t>
              The client requests an access token by authenticating with the authorization server
              and presenting the authorization grant.
            </t>
            <t>
              The authorization server authenticates the client and validates the authorization
              grant, and if valid issues an access token.
            </t>
            <t>
              The client requests the protected resource from the resource server and authenticates
              by presenting the access token.
            </t>
            <t>
              The resource server validates the access token, and if valid, serves the request.
            </t>
          </list>
        </t>
      </section>

      <section title='Authorization Grant'>
        <t>
          An authorization grant is a credential representing the resource owner's authorization
          (to access its protected resources) used by the client to obtain an access token. This
          specification defines four grant types: authorization code, implicit, resource owner
          password credentials, and client credentials, as well as an extensibility mechanism for
          defining additional types.
        </t>

        <section title='Authorization Code'>
          <t>
            The authorization code is obtained by using an authorization server as an intermediary
            between the client and resource owner. Instead of requesting authorization directly
            from the resource owner, the client directs the resource owner to an authorization
            server (via its user-agent as defined in <xref target='RFC2616' />), which in turn
            directs the resource owner back to the client with the authorization code.
          </t>
          <t>
            Before directing the resource owner back to the client with the authorization code, the
            authorization server authenticates the resource owner and obtains authorization.
            Because the resource owner only authenticates with the authorization server, the
            resource owner's credentials are never shared with the client.
          </t>
          <t>
            The authorization code provides a few important security benefits such as the ability
            to authenticate the client, and the transmission of the access token directly to
            the client without passing it through the resource owner's user-agent, potentially
            exposing it to others, including the resource owner.
          </t>
        </section>

        <section title='Implicit'>
          <t>
            The implicit grant is a simplified authorization code flow optimized for clients
            implemented in a browser using a scripting language such as JavaScript. In the implicit
            flow, instead of issuing the client an authorization code, the client is issued an
            access token directly (as the result of the resource owner authorization). The grant
            type is implicit as no intermediate credentials (such as an authorization code) are
            issued (and later used to obtain an access token).
          </t>
          <t>
            When issuing an implicit grant, the authorization server does not authenticate the
            client. In some cases, the client identity can be verified via the redirection URI
            used to deliver the access token to the client. The access token may be exposed to the
            resource owner or other applications with access to the resource owner's user-agent.
          </t>
          <t>
            Implicit grants improve the responsiveness and efficiency of some clients (such as a
            client implemented as an in-browser application) since it reduces the number of round
            trips required to obtain an access token. However, this convenience should be weighed
            against the security implications of using implicit grants, especially when the
            authorization code grant type is available.
          </t>
        </section>

        <section title="Resource Owner Password Credentials">
          <t>
            The resource owner password credentials (i.e. username and password) can be used
            directly as an authorization grant to obtain an access token. The credentials should
            only be used when there is a high degree of trust between the resource owner and the
            client (e.g. its device operating system or a highly privileged application), and
            when other authorization grant types are not available (such as an authorization code).
          </t>
          <t>
            Even though this grant type requires direct client access to the resource owner
            credentials, the resource owner credentials are used for a single request and are
            exchanged for an access token. This grant type can eliminate the need for the client
            to store the resource owner credentials for future use, by exchanging the credentials
            with a long-lived access token or refresh token.
          </t>
        </section>

        <section title='Client Credentials'>
          <t>
            The client credentials (or other forms of client authentication) can be used as an
            authorization grant when the authorization scope is limited to the protected resources
            under the control of the client, or to protected resources previously arranged with the
            authorization server. Client credentials are used as an authorization grant typically
            when the client is acting on its own behalf (the client is also the resource owner), or
            is requesting access to protected resources based on an authorization previously
            arranged with the authorization server.
          </t>
        </section>

      </section>

      <section title='Access Token'>
        <t>
          Access tokens are credentials used to access protected resources. An access token is a
          string representing an authorization issued to the client. The string is usually opaque
          to the client. Tokens represent specific scopes and durations of access, granted by the
          resource owner, and enforced by the resource server and authorization server.
        </t>
        <t>
          The token may denote an identifier used to retrieve the authorization information, or
          self-contain the authorization information in a verifiable manner (i.e. a token string
          consisting of some data and a signature). Additional authentication credentials, which
          are beyond the scope of this specification, may be required in order for the client to
          use a token.
        </t>
        <t>
          The access token provides an abstraction layer, replacing different authorization
          constructs (e.g. username and password) with a single token understood by the resource
          server. This abstraction enables issuing access tokens more restrictive than the
          authorization grant used to obtain them, as well as removing the resource server's need to
          understand a wide range of authentication methods.
        </t>
        <t>
          Access tokens can have different formats, structures, and methods of utilization (e.g.
          cryptographic properties) based on the resource server security requirements. Access token
          attributes and the methods used to access protected resources are beyond the scope of this
          specification and are defined by companion specifications.
        </t>
      </section>

      <section title='Refresh Token'>
        <t>
          Refresh tokens are credentials used to obtain access tokens. Refresh tokens are issued to
          the client by the authorization server and are used to obtain a new access token when the
          current access token becomes invalid or expires, or to obtain additional access tokens
          with identical or narrower scope (access tokens may have a shorter lifetime and fewer
          permissions than authorized by the resource owner). Issuing a refresh token is optional.
          If the authorization server issues a refresh token, it is included when issuing an access
          token.
        </t>
        <t>
          A refresh token is a string representing the authorization granted to the client by the
          resource owner. The string is usually opaque to the client. The token denotes an
          identifier used to retrieve the authorization information. Unlike access tokens, refresh
          tokens are intended for use only with authorization servers and are never sent to
          resource servers.
        </t>
        <figure title='Refreshing an Expired Access Token' anchor='Figure-2'>
          <artwork>
            <![CDATA[
  +--------+                                           +---------------+
  |        |--(A)------- Authorization Grant --------->|               |
  |        |                                           |               |
  |        |<-(B)----------- Access Token -------------|               |
  |        |               & Refresh Token             |               |
  |        |                                           |               |
  |        |                            +----------+   |               |
  |        |--(C)---- Access Token ---->|          |   |               |
  |        |                            |          |   |               |
  |        |<-(D)- Protected Resource --| Resource |   | Authorization |
  | Client |                            |  Server  |   |     Server    |
  |        |--(E)---- Access Token ---->|          |   |               |
  |        |                            |          |   |               |
  |        |<-(F)- Invalid Token Error -|          |   |               |
  |        |                            +----------+   |               |
  |        |                                           |               |
  |        |--(G)----------- Refresh Token ----------->|               |
  |        |                                           |               |
  |        |<-(H)----------- Access Token -------------|               |
  +--------+           & Optional Refresh Token        +---------------+
]]>
          </artwork>
        </figure>
        <t>
          The flow illustrated in <xref target='Figure-2' /> includes the following steps:
        </t>
        <t>
          <list style='format (%C)'>
            <t>
              The client requests an access token by authenticating with the authorization server,
              and presenting an authorization grant.
            </t>
            <t>
              The authorization server authenticates the client and validates the authorization
              grant, and if valid issues an access token and a refresh token.
            </t>
            <t>
              The client makes a protected resource request to the resource server by presenting
              the access token.
            </t>
            <t>
              The resource server validates the access token, and if valid, serves the request.
            </t>
            <t>
              Steps (C) and (D) repeat until the access token expires. If the client knows the
              access token expired, it skips to step (G), otherwise it makes another protected
              resource request.
            </t>
            <t>
              Since the access token is invalid, the resource server returns an invalid token
              error.
            </t>
            <t>
              The client requests a new access token by authenticating with the authorization
              server and presenting the refresh token. The client authentication requirements are
              based on the client type and on the authorization server policies.
            </t>
            <t>
              The authorization server authenticates the client and validates the refresh token,
              and if valid issues a new access token (and optionally, a new refresh token).
            </t>
          </list>
        </t>
      </section>

      <section title='Notational Conventions'>
        <t>
          The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD
          NOT', 'RECOMMENDED', 'MAY', and 'OPTIONAL' in this specification are to be interpreted as
          described in <xref target='RFC2119' />.
        </t>
        <t>
          This specification uses the Augmented Backus-Naur Form (ABNF) notation of
          <xref target='RFC5234' />.
        </t>
        <t>
          Certain security-related terms are to be understood in the sense defined in
          <xref target='RFC4949' />. These terms include, but are not limited to, 'attack',
          'authentication', 'authorization', 'certificate', 'confidentiality', 'credential',
          'encryption', 'identity', 'sign', 'signature', 'trust', 'validate', and 'verify'.
        </t>
        <t>
          Unless otherwise noted, all the protocol parameter names and values are case sensitive.
        </t>
      </section>

    </section>

    <section title='Client Registration'>
      <t>
        Before initiating the protocol, the client registers with the authorization server. The
        means through which the client registers with the authorization server are beyond the
        scope of this specification, but typically involve end-user interaction with an HTML
        registration form.
      </t>
      <t>
        Client registration does not require a direct interaction between the client and the
        authorization server. When supported by the authorization server, registration can rely
        on other means for establishing trust and obtaining the required client properties (e.g.
        redirection URI, client type). For example, registration can be accomplished using a
        self-issued or third-party-issued assertion, or by the authorization server performing
        client discovery using a trusted channel.
      </t>
      <t>
        When registering a client, the client developer:
      </t>
      <t>
        <list style='symbols'>
          <t>
            specifies the client type as described in <xref target='client-types' />,
          </t>
          <t>
            provides its client redirection URIs as described in
            <xref target='redirect-uri' />, and
          </t>
          <t>
            includes any other information required by the authorization server (e.g. application
            name, website, description, logo image, the acceptance of legal terms).
          </t>
        </list>
      </t>

      <section title='Client Types' anchor='client-types'>
        <t>
          OAuth defines two client types, based on their ability to authenticate securely with the
          authorization server (i.e. ability to maintain the confidentiality of their client
          credentials):
        </t>
        <t>
          <list style='hanging'>
            <t hangText='confidential'>
              <vspace />
              Clients capable of maintaining the confidentiality of their credentials (e.g.
              client implemented on a secure server with restricted access to the client
              credentials), or capable of secure client authentication using other means.
            </t>
            <t hangText='public'>
              <vspace />
              Clients incapable of maintaining the confidentiality of their credentials (e.g.
              clients executing on the resource owner's device such as an installed native
              application or a web browser-based application), and incapable of secure client
              authentication via any other means.
            </t>
          </list>
        </t>
        <t>
          The client type designation is based on the authorization server's definition of secure
          authentication and its acceptable exposure levels of client credentials.
        </t>
        <t>
          This specification has been designed around the following client profiles:
        </t>
        <t>
          <list style='hanging'>
            <t hangText='web application'>
              <vspace />
              A web application is a confidential client running on a web server. Resource owners access
              the client via an HTML user interface rendered in a user-agent on the resource
              owner's device. The client credentials as well as any access token issued to the
              client are stored on the web server and are not exposed to or accessible by the
              resource owner.
            </t>
            <t hangText='user-agent-based application'>
              <vspace />
              A user-agent-based application is a public client in which the client code is
              downloaded from a web server and executes within a user-agent (e.g. web browser) on
              the resource owner's device. Protocol data and credentials are easily accessible (and
              often visible) to the resource owner. Since such applications reside within the
              user-agent, they can make seamless use of the user-agent capabilities when requesting
              authorization.
            </t>
            <t hangText='native application'>
              <vspace />
              A native application is a public client installed and executed on the resource
              owner's device. Protocol data and credentials are accessible to the resource owner.
              It is assumed that any client authentication credentials included in the application
              can be extracted. On the other hand, dynamically issued credentials such access
              tokens or refresh tokens can receive an acceptable level of protection. At a
              minimum, these credentials are protected from hostile servers which the application
              may interact with. On some platform these credentials might be protected from other
              applications residing on the same device.
            </t>
          </list>
        </t>
      </section>

      <section title='Client Identifier' anchor='client-identifier'>
        <t>
          The authorization server issues the registered client a client identifier - a unique
          string representing the registration information provided by the client. The client
          identifier is not a secret, it is exposed to the resource owner, and MUST NOT be used
          alone for client authentication.
        </t>
      </section>

      <section title='Client Authentication' anchor='client-authentication'>
        <t>
          If the client type is confidential, the client and authorization server establish a client
          authentication method suitable for the security requirements of the authorization server.
          The authorization server MAY accept any form of client authentication meeting its
          security requirements.
        </t>
        <t>
          Confidential clients are typically issued (or establish) a set of client credentials used for
          authenticating with the authorization server (e.g. password, public/private key pair).
        </t>
        <t>
          The authorization server SHOULD NOT make assumptions about the client type or accept the
          type information provided without establishing trust with the client or its developer.
          The authorization server MAY establish a client authentication method with public
          clients. However, the authorization server MUST NOT rely on public client authentication
          for the purpose of identifying the client.
        </t>
        <t>
          The client MUST NOT use more than one authentication method in each request.
        </t>

        <section title='Client Password'>
          <t>
            Clients in possession of a client password MAY use the HTTP Basic authentication scheme
            as defined in <xref target='RFC2617' /> to authenticate with the authorization server.
            The client identifier is used as the username, and the client password is used as the
            password.
          </t>
          <figure>
            <preamble>
              For example (extra line breaks are for display purposes only):
            </preamble>
            <artwork>
              <![CDATA[
  Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
]]>
            </artwork>
          </figure>
          <t>
            Alternatively, the authorization server MAY allow including the client credentials in the
            request body using the following parameters:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='client_id'>
                <vspace />
                REQUIRED. The client identifier issued to the client during the registration process
                described by <xref target='client-identifier' />.
              </t>
              <t hangText='client_secret'>
                <vspace />
                REQUIRED. The client secret. The client MAY omit the parameter if the client secret
                is an empty string.
              </t>
            </list>
          </t>
          <t>
            Including the client credentials in the request body using the two parameters is NOT
            RECOMMENDED, and should be limited to clients unable to directly utilize the HTTP Basic
            authentication scheme (or other password-based HTTP authentication schemes).
          </t>
          <figure>
            <preamble>
              For example, requesting to refresh an access token (<xref target='token-refresh' />)
              using the body parameters (extra line breaks are for display purposes only):
            </preamble>
            <artwork>
              <![CDATA[
  POST /token HTTP/1.1
  Host: server.example.com
  Content-Type: application/x-www-form-urlencoded;charset=UTF-8

  grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
  &client_id=s6BhdRkqt3&client_secret=7Fjfp0ZBr1KtDRbnfVdmIw
]]>
            </artwork>
          </figure>
          <t>
            The authorization server MUST require the use of a transport-layer security mechanism
            when sending requests to the token endpoint, as requests using this authentication
            method result in the transmission of clear-text credentials.
          </t>
          <t>
            Since this client authentication method involves a password, the authorization server
            MUST protect any endpoint utilizing it against brute force attacks.
          </t>
        </section>

        <section title='Other Authentication Methods'>
          <t>
            The authorization server MAY support any suitable HTTP authentication scheme matching
            its security requirements. When using other authentication methods, the authorization
            server MUST define a mapping between the client identifier (registration record) and
            authentication scheme.
          </t>
        </section>

      </section>

      <section title='Unregistered Clients'>
        <t>
          This specification does not exclude the use of unregistered clients. However, the use
          with such clients is beyond the scope of this specification, and requires additional
          security analysis and review of its interoperability impact.
        </t>
      </section>
      
    </section>

    <section title='Protocol Endpoints'>
      <t>
        The authorization process utilizes two endpoints (HTTP resources):
      </t>
      <t>
        <list style='symbols'>
          <t>
            Authorization endpoint - used to obtain authorization from the resource owner via
            user-agent redirection.
          </t>
          <t>
            Token endpoint - used to exchange an authorization grant for an access token, typically
            with client authentication.
          </t>
        </list>
      </t>
      <t>
        Not every authorization grant type utilizes both endpoints. Extension grant types MAY
        define additional endpoints as needed.
      </t>

      <section title='Authorization Endpoint'>
        <t>
          The authorization endpoint is used to interact with the resource owner and obtain
          an authorization grant. The authorization server MUST first verify the identity of the
          resource owner. The way in which the authorization server authenticates the resource
          owner (e.g. username and password login, session cookies) is beyond the scope of this
          specification.
        </t>
        <t>
          The means through which the client obtains the location of the authorization endpoint are
          beyond the scope of this specification, but the location is typically provided in the
          service documentation.
        </t>
        <t>
          The endpoint URI MAY include an
          <spanx style='verb'>application/x-www-form-urlencoded</spanx> formatted
          (<xref target='W3C.REC-html401-19991224' />) query component (<xref target='RFC3986' />
          section 3.4), which MUST be retained when adding additional query parameters. The
          endpoint URI MUST NOT include a fragment component.
        </t>
        <t>
          Since requests to the authorization endpoint result in user authentication and the
          transmission of clear-text credentials (in the HTTP response), the authorization server
          MUST require the use of a transport-layer security mechanism when sending requests to the
          authorization endpoint. The authorization server MUST support TLS 1.0
          (<xref target='RFC2246' />), SHOULD support TLS 1.2 (<xref target='RFC5246' />) and its
          future replacements, and MAY support additional transport-layer mechanisms meeting its
          security requirements.
        </t>
        <t>
          The authorization server MUST support the use of the HTTP <spanx style='verb'>GET</spanx>
          method <xref target='RFC2616' /> for the authorization endpoint, and MAY support the use
          of the <spanx style='verb'>POST</spanx> method as well.
        </t>
        <t>
          Parameters sent without a value MUST be treated as if they were omitted from the request.
          The authorization server SHOULD ignore unrecognized request parameters. Request and
          response parameters MUST NOT be included more than once.
        </t>

        <section title='Response Type'>
          <t>
            The authorization endpoint is used by the authorization code grant type and implicit
            grant type flows. The client informs the authorization server of the desired grant
            type using the following parameter:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='response_type'>
                <vspace />
                REQUIRED. The value MUST be one of <spanx style='verb'>code</spanx> for requesting
                an authorization code as described by <xref target='code-authz-req' />,
                <spanx style='verb'>token</spanx> for requesting an access token (implicit grant)
                as described by <xref target='implicit-authz-req' />, or a registered extension
                value as described by <xref target='response-type-ext' />. If the response type
                contains one or more space characters (%x20), it is interpreted as a
                space-delimited list of values, where the order of values does not matter (e.g.
                <spanx style='verb'>a b</spanx> is the same as <spanx style='verb'>b a</spanx>).
              </t>
            </list>
          </t>
          <t>
            If an authorization request is missing the <spanx style='verb'>response_type</spanx>
            parameter, the authorization server SHOULD return an error response as described in
            <xref target='code-authz-error' />.
          </t>
        </section>

        <section title='Redirection Endpoint' anchor='redirect-uri'>
          <t>
            After completing its interaction with the resource owner, the authorization server
            directs the resource owner's user-agent back to the client. The authorization server
            redirects the user-agent to the client's redirection endpoint previously established
            with the authorization server during the client registration process or when making
            the authorization request.
          </t>
          <t>
            The redirection endpoint URI MUST be an absolute URI as defined by
            <xref target='RFC3986' /> section 4.3. The endpoint URI MAY include an
            <spanx style='verb'>application/x-www-form-urlencoded</spanx> formatted
            (<xref target='W3C.REC-html401-19991224' />) query component (<xref target='RFC3986' />
            section 3.4), which MUST be retained when adding additional query parameters. The
            endpoint URI MUST NOT include a fragment component.
          </t>

          <section title='Endpoint Request Confidentiality'>
            <t>
              If a redirection request will result in the transmission of an authorization code or
              access token over an open network (between the resource owner's user-agent and the
              client), the client SHOULD require the use of a transport-layer security mechanism.
            </t>
            <t>
              Lack of transport-layer security can have a severe impact on the security of the
              client and the protected resources it is authorized to access. The use of
              transport-layer security is particularly critical when the authorization process is
              used as a form of delegated end-user authentication by the client (e.g. third-party
              sign-in service).
            </t>
          </section>

          <section title='Registration Requirements'>
            <t>
              The authorization server SHOULD require all clients to register their redirection URI
              prior to using the authorization endpoint, and MUST require the following clients to
              register their redirection URI:
            </t>
            <t>
              <list style='symbols'>
                <t>
                  Public clients.
                </t>
                <t>
                  Confidential clients utilizing the implicit grant type.
                </t>
              </list>
            </t>
            <t>
              The authorization server SHOULD require the client to provide the complete
              redirection URI (the client MAY use the <spanx style='verb'>state</spanx> request
              parameter to achieve per-request customization). The authorization server MAY allow
              the client to register multiple redirection URIs. If requiring the registration of
              the complete redirection URI is not possible, the authorization server SHOULD require
              the registration of the URI scheme, authority, and path (allowing the client to
              dynamically change only the query component of the redirection URI when requesting
              authorization).
            </t>
          </section>

          <section title='Dynamic Configuration'>
            <t>
              If multiple redirection URIs have been registered, if only part of the redirection
              URI has been registered, or if no redirection URI has been registered, the client
              MUST include a redirection URI with the authorization request using the
              <spanx style='verb'>redirect_uri</spanx> request parameter.
            </t>
            <t>
              When a redirection URI is included in an authorization request, the authorization
              server MUST compare and match the value received against at least one of the
              registered redirection URIs (or URI components) as defined in
              <xref target='RFC3986' /> section 6, if any redirection URIs were registered.
              If the client registration included the full redirection URI, the authorization
              server MUST compare the two URIs using simple string comparison as defined
              in <xref target='RFC3986' /> section 6.2.1.
            </t>
             <t>
               If the authorization server allows the client to dynamically change the query
               component of the redirection URI, the client MUST ensure that manipulation of the
               query component by an attacker cannot lead to an abuse of the redirection endpoint
               as described in <xref target='open-redirect' />.
             </t>
         </section>

          <section title='Invalid Endpoint'>
            <t>
              If an authorization request fails validation due to a missing, invalid, or
              mismatching redirection URI, the authorization server SHOULD inform the resource
              owner of the error, and MUST NOT automatically redirect the user-agent to the invalid
              redirection URI.
            </t>
            <t>
              The authorization server SHOULD NOT redirect the user-agent to unregistered or
              untrusted URIs to prevent the authorization endpoint from being used as an open
              redirector.
            </t>
          </section>

          <section title='Endpoint Content'>
            <t>
              The redirection request to the client's endpoint typically results in an HTML
              document response, processed by the user-agent. If the HTML response is served
              directly as the result of the redirection request, any script included in the HTML
              document will execute with full access to the redirection URI and the credentials it
              contains.
            </t>
            <t>
              The client MUST NOT include any untrusted third-party scripts in the redirection
              endpoint response (e.g. third-party analytics, social plug-ins, ad networks) without
              first ensuring that its own scripts used to extract and remove the credentials from
              the URI will execute first.
            </t>
            <t>
              The client SHOULD NOT include any third-party scripts in the redirection endpoint
              response. Instead, it should extract the credentials from the URI and redirect the
              user-agent again to another endpoint without the credentials in the URI.
            </t>
          </section>
          
        </section>

      </section>

      <section title='Token Endpoint'>
        <t>
          The token endpoint is used by the client to obtain an access token by presenting its
          authorization grant or refresh token. The token endpoint is used with every authorization
          grant except for the implicit grant type (since an access token is issued directly).
        </t>
        <t>
          The means through which the client obtains the location of the token endpoint are
          beyond the scope of this specification but is typically provided in the service
          documentation.
        </t>
        <t>
          The endpoint URI MAY include an
          <spanx style='verb'>application/x-www-form-urlencoded</spanx> formatted
          (<xref target='W3C.REC-html401-19991224' />) query component (<xref target='RFC3986' />
          section 3.4), which MUST be retained when adding additional query parameters. The
          endpoint URI MUST NOT include a fragment component.
        </t>
        <t>
          Since requests to the token endpoint result in the transmission of clear-text credentials
          (in the HTTP request and response), the authorization server MUST require the use of a
          transport-layer security mechanism when sending requests to the token endpoint. The
          authorization server MUST support TLS 1.0 (<xref target='RFC2246' />), SHOULD support TLS
          1.2 (<xref target='RFC5246' />) and its future replacements, and MAY support additional
          transport-layer mechanisms meeting its security requirements.
        </t>
        <t>
          The client MUST use the HTTP <spanx style='verb'>POST</spanx> method when making access
          token requests.
        </t>
        <t>
          Parameters sent without a value MUST be treated as if they were omitted from the request.
          The authorization server SHOULD ignore unrecognized request parameters. Request and
          response parameters MUST NOT be included more than once.
        </t>

        <section title='Client Authentication' anchor='token-endpoint-auth'>
          <t>
            Confidential clients, clients issued client credentials, or clients assigned other
            authentication requirements MUST authenticate with the authorization server as
            described in <xref target='client-authentication' /> when making requests to the token
            endpoint. Client authentication is used for:
          </t>
          <t>
            <list style='symbols'>
              <t>
                Enforcing the binding of refresh tokens and authorization codes to the client they
                are issued. Client authentication is critical when an authorization code is
                transmitted to the redirection endpoint over an insecure channel, or when the
                redirection URI has not been registered in full.
              </t>
              <t>
                Recovering from a compromised client by disabling the client or changing its
                credentials, thus preventing an attacker from abusing stolen refresh tokens. Changing
                a single set of client credentials is significantly faster than revoking an entire
                set of refresh tokens.
              </t>
              <t>
                Implementing authentication management best practices which require periodic
                credential rotation. Rotation of an entire set of refresh tokens can be
                challenging, while rotation of a single set of client credentials is significantly
                easier.
              </t>
            </list>
          </t>
          <t>
            A public client that was not issued a client password MAY use the
            <spanx style='verb'>client_id</spanx> request parameter to identify itself when sending
            requests to the token endpoint.
          </t>
          <t>
            The security ramifications of allowing unauthenticated access by public clients to the
            token endpoint, as well as the issuance of refresh tokens to public clients MUST be
            taken into consideration.
          </t>
        </section>

      </section>

      <section title='Access Token Scope' anchor='scope'>
        <t>
          The authorization and token endpoints allow the client to specify the scope of the access
          request using the <spanx style='verb'>scope</spanx> request parameter. In turn, the
          authorization server uses the <spanx style='verb'>scope</spanx> response parameter to
          inform the client of the scope of the access token issued.
        </t>
        <t>
          The value of the scope parameter is expressed as a list of space-delimited, case
          sensitive strings. The strings are defined by the authorization server. If the value
          contains multiple space-delimited strings, their order does not matter, and each string
          adds an additional access range to the requested scope.
        </t>
        <t>
          The authorization server MAY fully or partially ignore the scope requested by the client
          based on the authorization server policy or the resource owner's instructions. If the
          issued access token scope is different from the one requested by the client, the
          authorization server SHOULD include the <spanx style='verb'>scope</spanx> response
          parameter to inform the client of the actual scope granted.
      </t>
      </section>

    </section>

    <section title='Obtaining Authorization'>
      <t>
        To request an access token, the client obtains authorization from the resource owner. The
        authorization is expressed in the form of an authorization grant which the client uses to
        request the access token. OAuth defines four grant types: authorization code, implicit,
        resource owner password credentials, and client credentials. It also provides an extension
        mechanism for defining additional grant types.
      </t>

      <section title='Authorization Code' anchor='grant-code'>
        <t>
          The authorization code grant type is used to obtain both access tokens and refresh
          tokens and is optimized for confidential clients. As a redirection-based flow, the client
          must be capable of interacting with the resource owner's user-agent (typically a web
          browser) and capable of receiving incoming requests (via redirection) from the
          authorization server.
        </t>
        <figure title='Authorization Code Flow' anchor='Figure-3'>
          <artwork>
            <![CDATA[
  +----------+
  | resource |
  |   owner  |
  |          |
  +----------+
       ^
       |
      (B)      
  +----|-----+          Client Identifier      +---------------+
  |         -+----(A)-- & Redirection URI ---->|               |
  |  User-   |                                 | Authorization |
  |  Agent  -+----(B)-- User authenticates --->|     Server    |
  |          |                                 |               |
  |         -+----(C)-- Authorization Code ---<|               |
  +-|----|---+                                 +---------------+
    |    |                                         ^      v
   (A)  (C)                                        |      |
    |    |                                         |      |
    ^    v                                         |      |
  +---------+                                      |      |
  |         |>---(D)-- Authorization Code ---------'      |
  |  Client |          & Redirection URI                  |
  |         |                                             |
  |         |<---(E)----- Access Token -------------------'
  +---------+       (w/ Optional Refresh Token)
]]>
          </artwork>
        </figure>
        <t>
          The flow illustrated in <xref target='Figure-3' /> includes the following steps:
        </t>
        <t>
          <list style='format (%C)'>
            <t>
              The client initiates the flow by directing the resource owner's user-agent to the
              authorization endpoint. The client includes its client identifier, requested
              scope, local state, and a redirection URI to which the authorization server will send
              the user-agent back once access is granted (or denied).
            </t>
            <t>
              The authorization server authenticates the resource owner (via the user-agent) and
              establishes whether the resource owner grants or denies the client's access request.
            </t>
            <t>
              Assuming the resource owner grants access, the authorization server redirects the
              user-agent back to the client using the redirection URI provided earlier (in the
              request or during client registration). The redirection URI includes an authorization
              code and any local state provided by the client earlier.
            </t>
            <t>
              The client requests an access token from the authorization server's token endpoint
              by including the authorization code received in the previous step. When making the
              request, the client authenticates with the authorization server. The client includes
              the redirection URI used to obtain the authorization code for verification.
            </t>
            <t>
              The authorization server authenticates the client, validates the authorization code,
              and ensures the redirection URI received matches the URI used to redirect the client
              in step (C). If valid, the authorization server responds back with an access token
              and optional refresh token.
            </t>
          </list>
        </t>

        <section title='Authorization Request' anchor='code-authz-req'>
          <t>
            The client constructs the request URI by adding the following parameters to the
            query component of the authorization endpoint URI using the
            <spanx style='verb'>application/x-www-form-urlencoded</spanx> format as defined by
            <xref target='W3C.REC-html401-19991224' />:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='response_type'>
                <vspace />
                REQUIRED. Value MUST be set to <spanx style='verb'>code</spanx>.
              </t>
              <t hangText='client_id'>
                <vspace />
                REQUIRED. The client identifier as described in
                <xref target='client-identifier' />.
              </t>
              <t hangText='redirect_uri'>
                <vspace />
                OPTIONAL, as described in <xref target='redirect-uri' />.
              </t>
              <t hangText='scope'>
                <vspace />
                OPTIONAL. The scope of the access request as described by <xref target='scope' />.
              </t>
              <t hangText='state'>
                <vspace />
                RECOMMENDED. An opaque value used by the client to maintain state between the request
                and callback. The authorization server includes this value when redirecting the
                user-agent back to the client. The parameter SHOULD be used for preventing
                cross-site request forgery as described in <xref target='CSRF' />.
              </t>
            </list>
          </t>
          <t>
            The client directs the resource owner to the constructed URI using an HTTP redirection
            response, or by other means available to it via the user-agent.
          </t>
          <figure>
            <preamble>
              For example, the client directs the user-agent to make the following HTTP request
              using transport-layer security (extra line breaks are for display purposes only):
            </preamble>
            <artwork>
              <![CDATA[
  GET /authorize?response_type=code&client_id=s6BhdRkqt3&state=xyz
      &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
  Host: server.example.com
]]>
            </artwork>
          </figure>
          <t>
            The authorization server validates the request to ensure all required parameters are
            present and valid. If the request is valid, the authorization server authenticates the
            resource owner and obtains an authorization decision (by asking the resource owner or
            by establishing approval via other means).
          </t>
          <t>
            When a decision is established, the authorization server directs the user-agent to the
            provided client redirection URI using an HTTP redirection response, or by other means
            available to it via the user-agent.
          </t>
        </section>

        <section title='Authorization Response'>
          <t>
            If the resource owner grants the access request, the authorization server issues an
            authorization code and delivers it to the client by adding the following parameters to
            the query component of the redirection URI using the
            <spanx style='verb'>application/x-www-form-urlencoded</spanx> format:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='code'>
                <vspace />
                REQUIRED. The authorization code generated by the authorization server. The
                authorization code MUST expire shortly after it is issued to mitigate the risk of
                leaks. A maximum authorization code lifetime of 10 minutes is RECOMMENDED. The
                client MUST NOT use the authorization code more than once. If an authorization code
                is used more than once, the authorization server MUST deny the request and SHOULD
                attempt to revoke all tokens previously issued based on that authorization code.
                The authorization code is bound to the client identifier and redirection URI.
              </t>
              <t hangText='state'>
                <vspace />
                REQUIRED if the <spanx style='verb'>state</spanx> parameter was present in the
                client authorization request. The exact value received from the client.
              </t>
            </list>
          </t>
          <figure>
            <preamble>
              For example, the authorization server redirects the user-agent by sending the
              following HTTP response:
            </preamble>
            <artwork>
              <![CDATA[
  HTTP/1.1 302 Found
  Location: https://client.example.com/cb?code=SplxlOBeZQQYbYS6WxSbIA
            &state=xyz
]]>
            </artwork>
          </figure>
          <t>
            The client SHOULD ignore unrecognized response parameters. The authorization code
            string size is left undefined by this specification. The client should avoid making
            assumptions about code value sizes. The authorization server should document the size
            of any value it issues.
          </t>

          <section title='Error Response' anchor='code-authz-error'>
            <t>
              If the request fails due to a missing, invalid, or mismatching redirection URI, or if
              the client identifier provided is invalid, the authorization server SHOULD inform the
              resource owner of the error, and MUST NOT automatically redirect the user-agent to
              the invalid redirection URI.
            </t>
            <t>
              If the resource owner denies the access request or if the request fails for reasons
              other than a missing or invalid redirection URI, the authorization server informs the
              client by adding the following parameters to the query component of the redirection
              URI using the <spanx style='verb'>application/x-www-form-urlencoded</spanx> format:
            </t>
            <t>
              <list style='hanging' hangIndent='6'>
                <t hangText='error'>
                  <vspace />
                  REQUIRED. A single error code from the following:

                  <list style='hanging' hangIndent='6'>
                    <t hangText='invalid_request'>
                      <vspace />
                      The request is missing a required parameter, includes an unsupported
                      parameter value, or is otherwise malformed.
                    </t>
                    <t hangText='unauthorized_client'>
                      <vspace />
                      The client is not authorized to request an authorization code using this
                      method.
                    </t>
                    <t hangText='access_denied'>
                      <vspace />
                      The resource owner or authorization server denied the request.
                    </t>
                    <t hangText='unsupported_response_type'>
                      <vspace />
                      The authorization server does not support obtaining an authorization code
                      using this method.
                    </t>
                    <t hangText='invalid_scope'>
                      <vspace />
                      The requested scope is invalid, unknown, or malformed.
                    </t>
                    <t hangText='server_error'>
                      <vspace />
                      The authorization server encountered an unexpected condition which prevented
                      it from fulfilling the request.
                    </t>
                    <t hangText='temporarily_unavailable'>
                      <vspace />
                      The authorization server is currently unable to handle the request due to a
                      temporary overloading or maintenance of the server.
                    </t>
                  </list>
                </t>
                <t hangText='error_description'>
                  <vspace />
                  OPTIONAL. A human-readable UTF-8 encoded text providing additional information,
                  used to assist the client developer in understanding the error that occurred.
                </t>
                <t hangText='error_uri'>
                  <vspace />
                  OPTIONAL. A URI identifying a human-readable web page with information about the
                  error, used to provide the client developer with additional information about the
                  error.
                </t>
                <t hangText='state'>
                  <vspace />
                  REQUIRED if a valid <spanx style='verb'>state</spanx> parameter was present in the
                  client authorization request. The exact value received from the client.
                </t>
              </list>
            </t>
            <figure>
              <preamble>
                For example, the authorization server redirects the user-agent by sending the
                following HTTP response:
              </preamble>
              <artwork>
                <![CDATA[
  HTTP/1.1 302 Found
  Location: https://client.example.com/cb?error=access_denied&state=xyz
]]>
              </artwork>
            </figure>
          </section>

        </section>

        <section title='Access Token Request'>
          <t>
            The client makes a request to the token endpoint by adding the following parameters
            using the <spanx style='verb'>application/x-www-form-urlencoded</spanx> format in the
            HTTP request entity-body:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='grant_type'>
                <vspace />
                REQUIRED. Value MUST be set to <spanx style='verb'>authorization_code</spanx>.
              </t>
              <t hangText='code'>
                <vspace />
                REQUIRED. The authorization code received from the authorization server.
              </t>
              <t hangText='redirect_uri'>
                <vspace />
                REQUIRED, if the <spanx style='verb'>redirect_uri</spanx> parameter was included in
                the authorization request as described in <xref target='code-authz-req' />, and
                their values MUST be identical.
              </t>
            </list>
          </t>
          <t>
            If the client type is confidential or the client was issued client credentials (or
            assigned other authentication requirements), the client MUST authenticate with the
            authorization server as described in <xref target='token-endpoint-auth' />.
          </t>
          <figure>
            <preamble>
              For example, the client makes the following HTTP request using transport-layer security
              (extra line breaks are for display purposes only):
            </preamble>
            <artwork>
              <![CDATA[
  POST /token HTTP/1.1
  Host: server.example.com
  Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
  Content-Type: application/x-www-form-urlencoded;charset=UTF-8

  grant_type=authorization_code&code=SplxlOBeZQQYbYS6WxSbIA
  &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb
]]>
            </artwork>
          </figure>
          <t>
            The authorization server MUST:
          </t>
          <t>
            <list style='symbols'>
              <t>
                require client authentication for confidential clients or for any client that was
                issued client credentials (or with other authentication requirements),
              </t>
              <t>
                authenticate the client if client authentication is included and ensure the
                authorization code was issued to the authenticated client,
              </t>
              <t>
                verify that the authorization code is valid, and
              </t>
              <t>
                ensure that the <spanx style='verb'>redirect_uri</spanx> parameter is present if
                the <spanx style='verb'>redirect_uri</spanx> parameter was included in the initial
                authorization request as described in <xref target='code-authz-req' />, and if
                included ensure their values are identical.
              </t>
            </list>
          </t>
        </section>

        <section title='Access Token Response'>
          <t>
            If the access token request is valid and authorized, the authorization server issues an
            access token and optional refresh token as described in <xref target='token-response' />.
            If the request client authentication failed or is invalid, the authorization server returns
            an error response as described in <xref target='token-errors' />.
          </t>
          <figure>
            <preamble>
              An example successful response:
            </preamble>
            <artwork>
              <![CDATA[
  HTTP/1.1 200 OK
  Content-Type: application/json;charset=UTF-8
  Cache-Control: no-store
  Pragma: no-cache

  {
    "access_token":"2YotnFZFEjr1zCsicMWpAA",
    "token_type":"example",
    "expires_in":3600,
    "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
    "example_parameter":"example_value"
  }
]]>
            </artwork>
          </figure>
        </section>

      </section>

      <section title='Implicit Grant' anchor='grant-implicit'>
        <t>
          The implicit grant type is used to obtain access tokens (it does not support the issuance
          of refresh tokens) and is optimized for public clients known to operate a particular
          redirection URI. These clients are typically implemented in a browser using a scripting
          language such as JavaScript.
        </t>
        <t>
          As a redirection-based flow, the client must be capable of interacting with the
          resource owner's user-agent (typically a web browser) and capable of receiving incoming
          requests (via redirection) from the authorization server.
        </t>
        <t>
          Unlike the authorization code grant type in which the client makes separate requests for
          authorization and access token, the client receives the access token as the result of the
          authorization request.
        </t>
        <t>
          The implicit grant type does not include client authentication, and relies on the
          presence of the resource owner and the registration of the redirection URI. Because the
          access token is encoded into the redirection URI, it may be exposed to the resource owner
          and other applications residing on its device.
        </t>
        <figure title='Implicit Grant Flow' anchor='Figure-4'>
          <artwork>
            <![CDATA[
  +----------+
  | Resource |
  |  Owner   |
  |          |
  +----------+
       ^
       |
      (B)      
  +----|-----+          Client Identifier     +---------------+
  |         -+----(A)-- & Redirection URI --->|               |
  |  User-   |                                | Authorization |
  |  Agent  -|----(B)-- User authenticates -->|     Server    |
  |          |                                |               |
  |          |<---(C)--- Redirection URI ----<|               |
  |          |          with Access Token     +---------------+
  |          |            in Fragment
  |          |                                +---------------+
  |          |----(D)--- Redirection URI ---->|   Web-Hosted  |
  |          |          without Fragment      |     Client    |
  |          |                                |    Resource   |
  |     (F)  |<---(E)------- Script ---------<|               |
  |          |                                +---------------+
  +-|--------+
    |    |    
   (A)  (G) Access Token
    |    |
    ^    v
  +---------+
  |         |
  |  Client |
  |         |
  +---------+
]]>
          </artwork>
        </figure>
        <t>
          The flow illustrated in <xref target='Figure-4' /> includes the following steps:
        </t>
        <t>
          <list style='format (%C)'>
            <t>
              The client initiates the flow by directing the resource owner's user-agent to the
              authorization endpoint. The client includes its client identifier, requested
              scope, local state, and a redirection URI to which the authorization server will send
              the user-agent back once access is granted (or denied).
            </t>
            <t>
              The authorization server authenticates the resource owner (via the user-agent) and
              establishes whether the resource owner grants or denies the client's access request.
            </t>
            <t>
              Assuming the resource owner grants access, the authorization server redirects the
              user-agent back to the client using the redirection URI provided earlier. The
              redirection URI includes the access token in the URI fragment.
            </t>
            <t>
              The user-agent follows the redirection instructions by making a request to the
              web-hosted client resource (which does not include the fragment). The user-agent
              retains the fragment information locally.
            </t>
            <t>
              The web-hosted client resource returns a web page (typically an HTML document with an
              embedded script) capable of accessing the full redirection URI including the fragment
              retained by the user-agent, and extracting the access token (and other parameters)
              contained in the fragment.
            </t>
            <t>
              The user-agent executes the script provided by the web-hosted client resource
              locally, which extracts the access token and passes it to the client.
            </t>
          </list>
        </t>

        <section title='Authorization Request' anchor='implicit-authz-req'>
          <t>
            The client constructs the request URI by adding the following parameters to the
            query component of the authorization endpoint URI using the
            <spanx style='verb'>application/x-www-form-urlencoded</spanx> format:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='response_type'>
                <vspace />
                REQUIRED. Value MUST be set to <spanx style='verb'>token</spanx>.
              </t>
              <t hangText='client_id'>
                <vspace />
                REQUIRED. The client identifier as described in
                <xref target='client-identifier' />.
              </t>
              <t hangText='redirect_uri'>
                <vspace />
                OPTIONAL, as described in <xref target='redirect-uri' />.
              </t>
              <t hangText='scope'>
                <vspace />
                OPTIONAL. The scope of the access request as described by <xref target='scope' />.
              </t>
              <t hangText='state'>
                <vspace />
                RECOMMENDED. An opaque value used by the client to maintain state between the request
                and callback. The authorization server includes this value when redirecting the
                user-agent back to the client. The parameter SHOULD be used for preventing
                cross-site request forgery as described in <xref target='CSRF' />.
              </t>
            </list>
          </t>
          <t>
            The client directs the resource owner to the constructed URI using an HTTP redirection
            response, or by other means available to it via the user-agent.
          </t>
          <figure>
            <preamble>
              For example, the client directs the user-agent to make the following HTTP request
              using transport-layer security (extra line breaks are for display purposes only):
            </preamble>
            <artwork>
              <![CDATA[
  GET /authorize?response_type=token&client_id=s6BhdRkqt3&state=xyz
      &redirect_uri=https%3A%2F%2Fclient%2Eexample%2Ecom%2Fcb HTTP/1.1
  Host: server.example.com
]]>
            </artwork>
          </figure>
          <t>
            The authorization server validates the request to ensure all required parameters are
            present and valid. The authorization server MUST verify that the redirection URI to which
            it will redirect the access token matches a redirection URI registered by the client as
            described in <xref target='redirect-uri' />.
          </t>
          <t>
            If the request is valid, the authorization server authenticates the resource owner and
            obtains an authorization decision (by asking the resource owner or by establishing
            approval via other means).
          </t>
          <t>
            When a decision is established, the authorization server directs the user-agent to the
            provided client redirection URI using an HTTP redirection response, or by other means
            available to it via the user-agent.
          </t>
        </section>

        <section title='Access Token Response'>
          <t>
            If the resource owner grants the access request, the authorization server issues an
            access token and delivers it to the client by adding the following parameters to
            the fragment component of the redirection URI using the
            <spanx style='verb'>application/x-www-form-urlencoded</spanx> format:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='access_token'>
                <vspace />
                REQUIRED. The access token issued by the authorization server.
              </t>
              <t hangText='token_type'>
                <vspace />
                REQUIRED. The type of the token issued as described in
                <xref target='token-types' />. Value is case insensitive.
              </t>
              <t hangText='expires_in'>
                <vspace />
                OPTIONAL. The lifetime in seconds of the access token. For example, the value
                <spanx style='verb'>3600</spanx> denotes that the access token will expire in one
                hour from the time the response was generated.
              </t>
              <t hangText='scope'>
                <vspace />
                OPTIONAL. The scope of the access token as described by <xref target='scope' />.
              </t>
              <t hangText='state'>
                <vspace />
                REQUIRED if the <spanx style='verb'>state</spanx> parameter was present in the
                client authorization request. The exact value received from the client.
              </t>
            </list>
          </t>
          <t>
            The authorization server MUST NOT issue a refresh token.
          </t>
          <figure>
            <preamble>
              For example, the authorization server redirects the user-agent by sending the
              following HTTP response (URI extra line breaks are for display purposes only):
            </preamble>
            <artwork>
              <![CDATA[
  HTTP/1.1 302 Found
  Location: http://example.com/rd#access_token=2YotnFZFEjr1zCsicMWpAA
            &state=xyz&token_type=example&expires_in=3600
]]>
            </artwork>
            <postamble>
              Developers should note that some HTTP client implementations do not support the
              inclusion of a fragment component in the HTTP <spanx style='verb'>Location</spanx>
              response header field. Such client will require using other methods for redirecting
              the client than a 3xx redirection response. For example, returning an HTML page which
              includes a 'continue' button with an action linked to the redirection URI.
            </postamble>
          </figure>
          <t>
            The client SHOULD ignore unrecognized response parameters. The access token string size
            is left undefined by this specification. The client should avoid making assumptions
            about value sizes. The authorization server should document the size of any value it
            issues.
          </t>

          <section title='Error Response' anchor='implicit-authz-error'>
            <t>
              If the request fails due to a missing, invalid, or mismatching redirection URI, or if
              the client identifier provided is invalid, the authorization server SHOULD inform the
              resource owner of the error, and MUST NOT automatically redirect the user-agent to
              the invalid redirection URI.
            </t>
            <t>
              If the resource owner denies the access request or if the request fails for reasons
              other than a missing or invalid redirection URI, the authorization server informs the
              client by adding the following parameters to the fragment component of the
              redirection URI using the
              <spanx style='verb'>application/x-www-form-urlencoded</spanx> format:
            </t>
            <t>
              <list style='hanging' hangIndent='6'>
                <t hangText='error'>
                  <vspace />
                  REQUIRED. A single error code from the following:

                  <list style='hanging' hangIndent='6'>
                    <t hangText='invalid_request'>
                      <vspace />
                      The request is missing a required parameter, includes an unsupported
                      parameter value, or is otherwise malformed.
                    </t>
                    <t hangText='unauthorized_client'>
                      <vspace />
                      The client is not authorized to request an access token using this method.
                    </t>
                    <t hangText='access_denied'>
                      <vspace />
                      The resource owner or authorization server denied the request.
                    </t>
                    <t hangText='unsupported_response_type'>
                      <vspace />
                      The authorization server does not support obtaining an access token using
                      this method.
                    </t>
                    <t hangText='invalid_scope'>
                      <vspace />
                      The requested scope is invalid, unknown, or malformed.
                    </t>
                    <t hangText='server_error'>
                      <vspace />
                      The authorization server encountered an unexpected condition which prevented
                      it from fulfilling the request.
                    </t>
                    <t hangText='temporarily_unavailable'>
                      <vspace />
                      The authorization server is currently unable to handle the request due to a
                      temporary overloading or maintenance of the server.
                    </t>
                  </list>
                </t>
                <t hangText='error_description'>
                  <vspace />
                  OPTIONAL. A human-readable UTF-8 encoded text providing additional information,
                  used to assist the client developer in understanding the error that occurred.
                </t>
                <t hangText='error_uri'>
                  <vspace />
                  OPTIONAL. A URI identifying a human-readable web page with information about the
                  error, used to provide the client developer with additional information about the
                  error.
                </t>
                <t hangText='state'>
                  <vspace />
                  REQUIRED if a valid <spanx style='verb'>state</spanx> parameter was present in the
                  client authorization request. The exact value received from the client.
                </t>
              </list>
            </t>
            <figure>
              <preamble>
                For example, the authorization server redirects the user-agent by sending the
                following HTTP response:
              </preamble>
              <artwork>
                <![CDATA[
  HTTP/1.1 302 Found
  Location: https://client.example.com/cb#error=access_denied&state=xyz
]]>
              </artwork>
            </figure>
          </section>

        </section>

      </section>

      <section title='Resource Owner Password Credentials' anchor='grant-password'>
        <t>
          The resource owner password credentials grant type is suitable in cases where the
          resource owner has a trust relationship with the client, such as its device operating
          system or a highly privileged application. The authorization server should take special
          care when enabling this grant type, and only allow it when other flows are not viable.
        </t>
        <t>
          The grant type is suitable for clients capable of obtaining the resource owner's
          credentials (username and password, typically using an interactive form). It is also used
          to migrate existing clients using direct authentication schemes such as HTTP Basic or
          Digest authentication to OAuth by converting the stored credentials to an access token.
        </t>
        <figure title='Resource Owner Password Credentials Flow' anchor='Figure-5'>
          <artwork>
            <![CDATA[
  +----------+
  | Resource |
  |  Owner   |
  |          |
  +----------+
       v
       |    Resource Owner
      (A) Password Credentials
       |
       v
  +---------+                                  +---------------+
  |         |>--(B)---- Resource Owner ------->|               |
  |         |         Password Credentials     | Authorization |
  | Client  |                                  |     Server    |
  |         |<--(C)---- Access Token ---------<|               |
  |         |    (w/ Optional Refresh Token)   |               |
  +---------+                                  +---------------+
]]>
          </artwork>
        </figure>
        <t>
          The flow illustrated in <xref target='Figure-5' /> includes the following steps:
        </t>
        <t>
          <list style='format (%C)'>
            <t>
              The resource owner provides the client with its username and password.
            </t>
            <t>
              The client requests an access token from the authorization server's token endpoint by
              including the credentials received from the resource owner. When making the request,
              the client authenticates with the authorization server.
            </t>
            <t>
              The authorization server authenticates the client and validates the resource owner
              credentials, and if valid issues an access token.
            </t>
          </list>
        </t>

        <section title='Authorization Request and Response'>
          <t>
            The method through which the client obtains the resource owner credentials is beyond
            the scope of this specification. The client MUST discard the credentials once an access
            token has been obtained.
          </t>
        </section>

        <section title='Access Token Request'>
          <t>
            The client makes a request to the token endpoint by adding the following parameters
            using the <spanx style='verb'>application/x-www-form-urlencoded</spanx> format in the
            HTTP request entity-body:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='grant_type'>
                <vspace />
                REQUIRED. Value MUST be set to <spanx style='verb'>password</spanx>.
              </t>
              <t hangText='username'>
                <vspace />
                REQUIRED. The resource owner username, encoded as UTF-8.
              </t>
              <t hangText='password'>
                <vspace />
                REQUIRED. The resource owner password, encoded as UTF-8.
              </t>
              <t hangText='scope'>
                <vspace />
                OPTIONAL. The scope of the access request as described by <xref target='scope' />.
              </t>
            </list>
          </t>
          <t>
            If the client type is confidential or the client was issued client credentials (or
            assigned other authentication requirements), the client MUST authenticate with the
            authorization server as described in <xref target='token-endpoint-auth' />.
          </t>
          <figure>
            <preamble>
              For example, the client makes the following HTTP request using transport-layer
              security (extra line breaks are for display purposes only):
            </preamble>
            <artwork>
              <![CDATA[
  POST /token HTTP/1.1
  Host: server.example.com
  Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
  Content-Type: application/x-www-form-urlencoded;charset=UTF-8
  
  grant_type=password&username=johndoe&password=A3ddj3w
]]>
            </artwork>
          </figure>
          <t>
            The authorization server MUST:
          </t>
          <t>
            <list style='symbols'>
              <t>
                require client authentication for confidential clients or for any client that was
                issued client credentials (or with other authentication requirements),
              </t>
              <t>
                authenticate the client if client authentication is included, and
              </t>
              <t>
                validate the resource owner password credentials.
              </t>
            </list>
          </t>
          <t>
            Since this access token request utilizes the resource owner's password, the
            authorization server MUST protect the endpoint against brute force attacks.
          </t>
        </section>

        <section title='Access Token Response'>
          <t>
            If the access token request is valid and authorized, the authorization server issues an
            access token and optional refresh token as described in <xref target='token-response' />.
            If the request failed client authentication or is invalid, the authorization server returns
            an error response as described in <xref target='token-errors' />.
          </t>
          <figure>
            <preamble>
              An example successful response:
            </preamble>
            <artwork>
              <![CDATA[
  HTTP/1.1 200 OK
  Content-Type: application/json;charset=UTF-8
  Cache-Control: no-store
  Pragma: no-cache

  {
    "access_token":"2YotnFZFEjr1zCsicMWpAA",
    "token_type":"example",
    "expires_in":3600,
    "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
    "example_parameter":"example_value"
  }
]]>
            </artwork>
          </figure>
        </section>

      </section>

      <section title='Client Credentials' anchor='grant-client'>
        <t>
          The client can request an access token using only its client credentials (or other
          supported means of authentication) when the client is requesting access to the
          protected resources under its control, or those of another resource owner which has been
          previously arranged with the authorization server (the method of which is beyond the
          scope of this specification).
        </t>
        <t>
          The client credentials grant type MUST only be used by confidential clients.
        </t>
        <figure title='Client Credentials Flow' anchor='Figure-6'>
          <artwork>
            <![CDATA[
  +---------+                                  +---------------+
  |         |                                  |               |
  |         |>--(A)- Client Authentication --->| Authorization |
  | Client  |                                  |     Server    |
  |         |<--(B)---- Access Token ---------<|               |
  |         |                                  |               |
  +---------+                                  +---------------+
]]>
          </artwork>
        </figure>
        <t>
          The flow illustrated in <xref target='Figure-6' /> includes the following steps:
        </t>
        <t>
          <list style='format (%C)'>
            <t>
              The client authenticates with the authorization server and requests an access token
              from the token endpoint.
            </t>
            <t>
              The authorization server authenticates the client, and if valid issues an access
              token.
            </t>
          </list>
        </t>

        <section title='Authorization Request and Response'>
          <t>
            Since the client authentication is used as the authorization grant, no additional
            authorization request is needed.
          </t>
        </section>

        <section title='Access Token Request'>
          <t>
            The client makes a request to the token endpoint by adding the following parameters
            using the <spanx style='verb'>application/x-www-form-urlencoded</spanx> format in the
            HTTP request entity-body:
          </t>
          <t>
            <list style='hanging' hangIndent='6'>
              <t hangText='grant_type'>
                <vspace />
                REQUIRED. Value MUST be set to <spanx style='verb'>client_credentials</spanx>.
              </t>
              <t hangText='scope'>
                <vspace />
                OPTIONAL. The scope of the access request as described by <xref target='scope' />.
              </t>
            </list>
          </t>
          <t>
            The client MUST authenticate with the authorization server as described in
            <xref target='token-endpoint-auth' />.
          </t>
          <figure>
            <preamble>
              For example, the client makes the following HTTP request using transport-layer
              security (extra line breaks are for display purposes only):
            </preamble>
            <artwork>
              <![CDATA[
  POST /token HTTP/1.1
  Host: server.example.com
  Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
  Content-Type: application/x-www-form-urlencoded;charset=UTF-8
  
  grant_type=client_credentials
]]>
            </artwork>
          </figure>
          <t>
            The authorization server MUST authenticate the client.
          </t>
        </section>

        <section title='Access Token Response'>
          <t>
            If the access token request is valid and authorized, the authorization server issues an
            access token as described in <xref target='token-response' />. A refresh token SHOULD
            NOT be included. If the request failed client authentication or is invalid, the
            authorization server returns an error response as described in
            <xref target='token-errors' />.
          </t>
          <figure>
            <preamble>
              An example successful response:
            </preamble>
            <artwork>
              <![CDATA[
  HTTP/1.1 200 OK
  Content-Type: application/json;charset=UTF-8
  Cache-Control: no-store
  Pragma: no-cache
  
  {
    "access_token":"2YotnFZFEjr1zCsicMWpAA",
    "token_type":"example",
    "expires_in":3600,
    "example_parameter":"example_value"
  }
]]>
            </artwork>
          </figure>
        </section>

      </section>

      <section title='Extensions'>
        <t>
          The client uses an extension grant type by specifying the grant type using an
          absolute URI (defined by the authorization server) as the value of the
          <spanx style='verb'>grant_type</spanx> parameter of the token endpoint, and by
          adding any additional parameters necessary.
        </t>
        <figure>
          <preamble>
            For example, to request an access token using a SAML 2.0 assertion grant type as
            defined by <xref target='I-D.ietf-oauth-saml2-bearer' />, the client makes the
            following HTTP request using transport-layer security (line breaks are for display
            purposes only):
          </preamble>
          <artwork>
            <![CDATA[
  POST /token HTTP/1.1
  Host: server.example.com
  Content-Type: application/x-www-form-urlencoded;charset=UTF-8

  grant_type=urn%3Aietf%3Aparams%3Aoauth%3Agrant-type%3Asaml2-
  bearer&assertion=PEFzc2VydGlvbiBJc3N1ZUluc3RhbnQ9IjIwMTEtMDU
  [...omitted for brevity...]aG5TdGF0ZW1lbnQ-PC9Bc3NlcnRpb24-
]]>
          </artwork>
        </figure>
        <t>
          If the access token request is valid and authorized, the authorization server issues an
          access token and optional refresh token as described in <xref target='token-response' />.
          If the request failed client authentication or is invalid, the authorization server returns
          an error response as described in <xref target='token-errors' />.
        </t>
      </section>

    </section>

    <section title='Issuing an Access Token' anchor='token-issue'>
      <t>
        If the access token request is valid and authorized, the authorization server issues an
        access token and optional refresh token as described in <xref target='token-response' />.
        If the request failed client authentication or is invalid, the authorization server returns
        an error response as described in <xref target='token-errors' />.
      </t>

      <section title='Successful Response' anchor='token-response'>
        <t>
          The authorization server issues an access token and optional refresh token, and
          constructs the response by adding the following parameters to the entity body of the HTTP
          response with a 200 (OK) status code:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='access_token'>
              <vspace />
              REQUIRED. The access token issued by the authorization server.
            </t>
            <t hangText='token_type'>
              <vspace />
              REQUIRED. The type of the token issued as described in <xref target='token-types' />.
              Value is case insensitive.
            </t>
            <t hangText='expires_in'>
              <vspace />
              OPTIONAL. The lifetime in seconds of the access token. For example, the value
              <spanx style='verb'>3600</spanx> denotes that the access token will expire in one
              hour from the time the response was generated.
            </t>
            <t hangText='refresh_token'>
              <vspace />
              OPTIONAL. The refresh token which can be used to obtain new access tokens using the
              same authorization grant as described in <xref target='token-refresh' />.
            </t>
            <t hangText='scope'>
              <vspace />
              OPTIONAL. The scope of the access token as described by <xref target='scope' />.
            </t>
          </list>
        </t>
        <t>
          The parameters are included in the entity body of the HTTP response using the
          <spanx style='verb'>application/json</spanx> media type as defined by
          <xref target='RFC4627' />. The parameters are serialized into a JSON structure by
          adding each parameter at the highest structure level. Parameter names and string values
          are included as JSON strings. Numerical values are included as JSON numbers. The order of
          parameters does not matter and can vary.
        </t>
        <t>
          The authorization server MUST include the HTTP
          <spanx style='verb'>Cache-Control</spanx> response header field <xref target='RFC2616' />
          with a value of <spanx style='verb'>no-store</spanx> in any response containing tokens,
          credentials, or other sensitive information, as well as the
          <spanx style='verb'>Pragma</spanx> response header field <xref target='RFC2616' /> with a
          value of <spanx style='verb'>no-cache</spanx>.
        </t>
        <figure>
          <preamble>
            For example:
          </preamble>
          <artwork>
            <![CDATA[
  HTTP/1.1 200 OK
  Content-Type: application/json;charset=UTF-8
  Cache-Control: no-store
  Pragma: no-cache

  {
    "access_token":"2YotnFZFEjr1zCsicMWpAA",
    "token_type":"example",
    "expires_in":3600,
    "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA",
    "example_parameter":"example_value"
  }
]]>
          </artwork>
        </figure>
        <t>
          The client SHOULD ignore unrecognized response parameters. The sizes of tokens and other
          values received from the authorization server are left undefined. The client should
          avoid making assumptions about value sizes. The authorization server should document the
          size of any value it issues.
        </t>
      </section>

      <section title='Error Response' anchor='token-errors'>
        <t>
          The authorization server responds with an HTTP 400 (Bad Request) status code and includes
          the following parameters with the response:
        </t>
        <t>
          <list style='hanging' hangIndent='6'>
            <t hangText='error'>
              <vspace />
              REQUIRED. A single error code from the following:

              <list style='hanging' hangIndent='6'>
                <t hangText='invalid_request'>
                  <vspace />
                  The request is missing a required parameter, includes an unsupported
                  parameter value, repeats a parameter, includes multiple
                  credentials, utilizes more than one mechanism for authenticating the client,
                  or is otherwise malformed.
                </t>
                <t hangText='invalid_client'>
                  <vspace />
                  Client authentication failed (e.g. unknown client, no client authentication
                  included, or unsupported authentication method). The authorization server MAY
                  return an HTTP 401 (Unauthorized) status code to indicate which HTTP
                  authentication schemes are supported. If the client attempted to authenticate via
                  the <spanx style='verb'>Authorization</spanx> request header field,
                  the authorization server MUST respond with an HTTP 401 (Unauthorized) status
                  code, and include the <spanx style='verb'>WWW-Authenticate</spanx> response
                  header field matching the authentication scheme used by the client.
                </t>
                <t hangText='invalid_grant'>
                  <vspace />
                  The provided authorization grant (e.g. authorization code, resource owner
                  credentials, client credentials) is invalid, expired, revoked, does not match the
                  redirection URI used in the authorization request, or was issued to another client.
                </t>
                <t hangText='unauthorized_client'>
                  <vspace />
                  The authenticated client is not authorized to use this authorization grant type.
                </t>
                <t hangText='unsupported_grant_type'>
                  <vspace />
                  The authorization grant type is not supported by the authorization server.
                </t>
                <t hangText='invalid_scope'>
                  <vspace />
                  The requested scope is invalid, unknown, malformed, or exceeds the scope granted
                  by the resource owner.
                </t>
              </list>
            </t>
            <t hangText='error_description'>
              <vspace />
              OPTIONAL. A human-readable UTF-8 encoded text providing additional information,
              used to assist the client developer in understanding the error that occurred.
            </t>
            <t hangText='error_uri'>
              <vspace />
              OPTIONAL. A URI identifying a human-readable web page with information about the
              error, used to provide the client developer with additional information about the
              error.
            </t>
          </list>
        </t>
        <t>
          The parameters are included in the entity body of the HTTP response using the
          <spanx style='verb'>application/json</spanx> media type as defined by
          <xref target='RFC4627' />. The parameters are serialized into a JSON structure by
          adding each parameter at the highest structure level. Parameter names and string values
          are included as JSON strings. Numerical values are included as JSON numbers. The order of
          parameters does not matter and can vary.
        </t>
        <figure>
          <preamble>
            For example:
          </preamble>
          <artwork>
            <![CDATA[
  HTTP/1.1 400 Bad Request
  Content-Type: application/json;charset=UTF-8
  Cache-Control: no-store
  Pragma: no-cache

  {
    "error":"invalid_request"
  }
]]>
          </artwork>
        </figure>
      </section>

    </section>

    <section title='Refreshing an Access Token' anchor='token-refresh'>
      <t>
        If the authorization server issued a refresh token to the client, the client makes a
        refresh request to the token endpoint by adding the following parameters using the
        <spanx style='verb'>application/x-www-form-urlencoded</spanx> format in the HTTP request
        entity-body:
      </t>
      <t>
        <list style='hanging' hangIndent='6'>
          <t hangText='grant_type'>
            <vspace />
            REQUIRED. Value MUST be set to <spanx style='verb'>refresh_token</spanx>.
          </t>
          <t hangText='refresh_token'>
            <vspace />
            REQUIRED. The refresh token issued to the client.
          </t>
          <t hangText='scope'>
            <vspace />
            OPTIONAL. The scope of the access request as described by <xref target='scope' />.
            The requested scope MUST NOT include any scope not originally granted by the resource
            owner, and if omitted is treated as equal to the scope originally granted by the
            resource owner.
          </t>
        </list>
      </t>
      <t>
        Because refresh tokens are typically long-lasting credentials used to request additional
        access tokens, the refresh token is bound to the client it was issued. If the client type
        is confidential or the client was issued client credentials (or assigned other
        authentication requirements), the client MUST authenticate with the authorization server as
        described in <xref target='token-endpoint-auth' />.
      </t>
      <figure>
        <preamble>
          For example, the client makes the following HTTP request using transport-layer
          security (extra line breaks are for display purposes only):
        </preamble>
        <artwork>
          <![CDATA[
  POST /token HTTP/1.1
  Host: server.example.com
  Authorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW
  Content-Type: application/x-www-form-urlencoded;charset=UTF-8
  
  grant_type=refresh_token&refresh_token=tGzv3JOkF0XG5Qx2TlKWIA
]]>
        </artwork>
      </figure>
      <t>
        The authorization server MUST:
      </t>
      <t>
        <list style='symbols'>
          <t>
            require client authentication for confidential clients or for any client that was
            issued client credentials (or with other authentication requirements),
          </t>
          <t>
            authenticate the client if client authentication is included and ensure the
            refresh token was issued to the authenticated client, and
          </t>
          <t>
            validate the refresh token.
          </t>
        </list>
      </t>
      <t>
        If valid and authorized, the authorization server issues an access token as described in
        <xref target='token-response' />. If the request failed verification or is invalid, the
        authorization server returns an error response as described in
        <xref target='token-errors' />.
      </t>
      <t>
        The authorization server MAY issue a new refresh token, in which case the client MUST
        discard the old refresh token and replace it with the new refresh token. The authorization
        server MAY revoke the old refresh token after issuing a new refresh token to the client. If
        a new refresh token is issued, the refresh token scope MUST be identical to that of the
        refresh token included by the client in the request.
      </t>
    </section>

    <section title='Accessing Protected Resources' anchor='access-resource'>
      <t>
        The client accesses protected resources by presenting the access token to the resource
        server. The resource server MUST validate the access token and ensure it has not expired
        and that its scope covers the requested resource. The methods used by the resource server
        to validate the access token (as well as any error responses) are beyond the scope of this
        specification, but generally involve an interaction or coordination between the resource
        server and the authorization server.
      </t>
      <t>
        The method in which the client utilized the access token to authenticate with the resource
        server depends on the type of access token issued by the authorization server. Typically,
        it involves using the HTTP <spanx style='verb'>Authorization</spanx> request header field
        <xref target='RFC2617' /> with an authentication scheme defined by the access token type
        specification.
      </t>

      <section title='Access Token Types' anchor='token-types'>
        <t>
          The access token type provides the client with the information required to successfully
          utilize the access token to make a protected resource request (along with type-specific
          attributes). The client MUST NOT use an access token if it does not understand or does
          not trust the token type.
        </t>
        <figure>
          <preamble>
            For example, the <spanx style='verb'>bearer</spanx> token type defined in
            <xref target='I-D.ietf-oauth-v2-bearer' /> is utilized by simply including the access
            token string in the request:
          </preamble>
          <artwork>
            <![CDATA[
  GET /resource/1 HTTP/1.1
  Host: example.com
  Authorization: Bearer 7Fjfp0ZBr1KtDRbnfVdmIw
]]>
          </artwork>
        </figure>
        <figure>
          <preamble>
            while the <spanx style='verb'>mac</spanx> token type defined in
            <xref target='I-D.ietf-oauth-v2-http-mac' /> is utilized by issuing a MAC key
            together with the access token which is used to sign certain components of the HTTP
            requests:
          </preamble>
          <artwork>
            <![CDATA[
  GET /resource/1 HTTP/1.1
  Host: example.com
  Authorization: MAC id="h480djs93hd8",
                     nonce="274312:dj83hs9s",
                     mac="kDZvddkndxvhGRXZhvuDjEWhGeE="
]]>
          </artwork>
        </figure>
        <t>
          The above examples are provided for illustration purposes only. Developers are advised to
          consult the <xref target='I-D.ietf-oauth-v2-bearer' /> and
          <xref target='I-D.ietf-oauth-v2-http-mac' /> specifications before use.
        </t>
        <t>
          Each access token type definition specifies the additional attributes (if any) sent to
          the client together with the <spanx style='verb'>access_token</spanx> response parameter.
          It also defines the HTTP authentication method used to include the access token when
          making a protected resource request.
        </t>
      </section>

    </section>

    <section title='Extensibility' anchor='extensions'>

      <section title='Defining Access Token Types' anchor='new-types'>
        <t>
          Access token types can be defined in one of two ways: registered in the access token type
          registry (following the procedures in <xref target='type-registry' />), or by using a
          unique absolute URI as its name.
        </t>
        <t>
          Types utilizing a URI name SHOULD be limited to vendor-specific implementations that are
          not commonly applicable, and are specific to the implementation details of the resource
          server where they are used.
        </t>
        <t>
          All other types MUST be registered. Type names MUST conform to the type-name ABNF. If the
          type definition includes a new HTTP authentication scheme, the type name SHOULD be
          identical to the HTTP authentication scheme name (as defined by <xref target='RFC2617' />).
          The token type <spanx style='verb'>example</spanx> is reserved for use in examples.
        </t>
        <figure>
          <artwork>
            <![CDATA[
  type-name  = 1*name-char
  name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]>
          </artwork>
        </figure>
      </section>

      <section title='Defining New Endpoint Parameters'>
        <t>
          New request or response parameters for use with the authorization endpoint or the token
          endpoint are defined and registered in the parameters registry following the procedure in
          <xref target='parameters-registry' />.
        </t>
        <t>
          Parameter names MUST conform to the param-name ABNF and parameter values syntax MUST be
          well-defined (e.g., using ABNF, or a reference to the syntax of an existing parameter).
        </t>
        <figure>
          <artwork>
            <![CDATA[
  param-name  = 1*name-char
  name-char   = "-" / "." / "_" / DIGIT / ALPHA
]]>
          </artwork>
        </figure>
        <t>
          Unregistered vendor-specific parameter extensions that are not commonly applicable, and
          are specific to the implementation details of the authorization server where they are
          used SHOULD utilize a vendor-specific prefix that is not likely to conflict with other
          registered values (e.g. begin with 'companyname_').
        </t>
      </section>

      <section title='Defining New Authorization Grant Types'>
        <t>
          New authorization grant types can be defined by assigning them a unique absolute URI for
          use with the <spanx style='verb'>grant_type</spanx> parameter. If the extension grant
          type requires additional token endpoint parameters, they MUST be registered in the OAuth
          parameters registry as described by <xref target='parameters-registry' />.
        </t>
      </section>

      <section title='Defining New Authorization Endpoint Response Types' anchor='response-type-ext'>
        <t>
          New response types for use with the authorization endpoint are defined and registered in
          the authorization endpoint response type registry following the procedure in
          <xref target='response-type-registry' />. Response type names MUST conform to the
          response-type ABNF.
        </t>
        <figure>
          <artwork>
            <![CDATA[
  response-type  = response-name *( SP response-name )
  response-name  = 1*response-char
  response-char  = "_" / DIGIT / ALPHA
]]>
          </artwork>
        </figure>
        <t>
          If a response type contains one of more space characters (%x20), it is compared as a
          space-delimited list of values in which the order of values does not matter. Only one
          order of values can be registered, which covers all other arrangements of the same set of
          values.
        </t>
        <t>
          For example, the response type <spanx style='verb'>token code</spanx> is left undefined
          by this specification. However, an extension can define and register the
          <spanx style='verb'>token code</spanx> response type. Once registered, the same
          combination cannot be registered as <spanx style='verb'>code token</spanx>, but both
          values can be used to denote the same response type.
        </t>
      </section>

      <section title='Defining Additional Error Codes' anchor='new-errors'>
        <t>
          In cases where protocol extensions (i.e. access token types, extension parameters, or
          extension grant types) require additional error codes to be used with the authorization
          code grant error response (<xref target='code-authz-error' />), the implicit grant error
          response (<xref target='implicit-authz-error' />), or the token error response
          (<xref target='token-errors' />), such error codes MAY be defined.
        </t>
        <t>
          Extension error codes MUST be registered (following the procedures in
          <xref target='error-registry' />) if the extension they are used in conjunction with is
          a registered access token type, a registered endpoint parameter, or an extension grant
          type. Error codes used with unregistered extensions MAY be registered.
        </t>
        <t>
          Error codes MUST conform to the error-code ABNF, and SHOULD be prefixed by an identifying
          name when possible. For example, an error identifying an invalid value set to the
          extension parameter <spanx style='verb'>example</spanx> should be named
          <spanx style='verb'>example_invalid</spanx>.
        </t>
        <figure>
          <artwork>
            <![CDATA[
  error-code   = ALPHA *error-char
  error-char   = "-" / "." / "_" / DIGIT / ALPHA
]]>
          </artwork>
        </figure>
      </section>

    </section>

    <section title='Native Applications'>
      <t>
        Native applications are clients installed and executed on the resource owner's device
        (i.e. desktop application, native mobile application). Native applications may require
        special consideration related to security, platform capabilities, and overall end-user
        experience.
      </t>
      <t>
        The authorization endpoint requires interaction between the client and the resource
        owner's user-agent. Native applications can invoke an external user-agent or embed a
        user-agent within the application. For example:
      </t>
      <t>
        <list style='symbols'>
          <t>
            External user-agent - the native application can capture the response from the
            authorization server using a redirection URI with a scheme registered with the
            operating system to invoke the client as the handler, manual copy-and-paste of the
            credentials, running a local web server, installing a user-agent extension, or by
            providing a redirection URI identifying a server-hosted resource under the client's
            control, which in turn makes the response available to the native application.
          </t>
          <t>
            Embedded user-agent - the native application obtains the response by directly
            communicating with the embedded user-agent by monitoring state changes emitted during
            the resource load, or accessing the user-agent's cookies storage.
          </t>
        </list>
      </t>
      <t>
        When choosing between an external or embedded user-agent, developers should consider:
      </t>
      <t>
        <list style='symbols'>
          <t>
            External user-agents may improve completion rate as the resource owner may already have
            an active session with the authorization server removing the need to re-authenticate. It
            provides a familiar end-user experience and functionality. The resource owner may also
            rely on user-agent features or extensions to assist with authentication (e.g. password
            manager, 2-factor device reader).
          </t>
          <t>
            Embedded user-agents may offer improved usability, as they remove the need to switch
            context and open new windows.
          </t>
          <t>
            Embedded user-agents pose a security challenge because resource owners are
            authenticating in an unidentified window without access to the visual protections found
            in most external user-agents.  Embedded user-agents educate end-user to trust
            unidentified requests for authentication (making phishing attacks easier to execute).
          </t>
        </list>
      </t>
      <t>
        When choosing between the implicit grant type and the authorization code grant type, the
        following should be considered:
      </t>
      <t>
        <list style='symbols'>
          <t>
            Native applications that use the authorization code grant type SHOULD do so without
            using client credentials, due to the native applicationâ€™s inability to keep client
            credentials confidential.
          </t>
          <t>
            When using the implicit grant type flow a refresh token is not returned which requires
            repeating the authorization process once the access token expires.
          </t>
        </list>
      </t>
    </section>

    <section title='Security Considerations'>
      <t>
        As a flexible and extensible framework, OAuth's security considerations depend on many
        factors. The following sections provide implementers with security guidelines focused on
        the three client profiles described in <xref target='client-types' />: web application,
        user-agent-based application, and native application.
      </t>
      <t>
        A comprehensive OAuth security model and analysis, as well as background for the protocol
        design is provided by <xref target='I-D.ietf-oauth-v2-threatmodel' />.
      </t>

      <section title='Client Authentication'>
        <t>
          The authorization server establishes client credentials with web application clients for
          the purpose of client authentication. The authorization server is encouraged to consider
          stronger client authentication means than a client password. Web application clients MUST
          ensure confidentiality of client passwords and other client credentials.
        </t>
        <t>
          The authorization server MUST NOT issue client passwords or other client credentials to
          native application or user-agent-based application clients for the purpose of client
          authentication. The authorization server MAY issue a client password or other credentials
          for a specific installation of a native application client on a specific device.
        </t>
        <t>
          When client authentication is not possible, the authorization server SHOULD employ other
          means to validate the client's identity. For example, by requiring the registration of
          the client redirection URI or enlisting the resource owner to confirm identity. A valid
          redirection URI is not sufficient to verify the client's identity when asking for
          end-user authorization, but can be used to prevent delivering credentials to a
          counterfeit client after obtaining end-user authorization.
        </t>
        <t>
          The authorization server must consider the security implications of interacting with
          unauthenticated clients and take measures to limit the potential exposure of other
          credentials (e.g. refresh tokens) issued to such clients.
        </t>
      </section>

      <section title='Client Impersonation'>
        <t>
          A malicious client can impersonate another client and obtain access to protected
          resources, if the impersonated client fails to, or is unable to, keep its client
          credentials confidential.
        </t>
        <t>
          The authorization server MUST authenticate the client whenever possible. If the
          authorization server cannot authenticate the client due to the client's nature, the
          authorization server MUST require the registration of any redirection URI used for
          receiving authorization responses, and SHOULD utilize other means to protect resource
          owners from such malicious clients. For example, the authorization server can engage
          the resource owner to assist in identifying the client and its origin.
        </t>
        <t>
          The authorization server SHOULD enforce explicit resource owner authentication and
          provide the resource owner with information about the client and the requested
          authorization scope and lifetime. It is up to the resource owner to review the
          information in the context of the current client, and authorize or deny the request.
        </t>
        <t>
          The authorization server SHOULD NOT process repeated authorization requests
          automatically (without active resource owner interaction) without authenticating the
          client or relying on other measures to ensure the repeated request comes from the
          original client and not an impersonator.
        </t>
      </section>

      <section title='Access Tokens'>
        <t>
          Access token (as well as any access token type-specific attributes) MUST be kept
          confidential in transit and storage, and only shared among the authorization server, the
          resource servers the access token is valid for, and the client to whom the access token
          is issued.
        </t>
        <t>
          When using the implicit grant type, the access token is transmitted in the URI fragment,
          which can expose it to unauthorized parties.
        </t>
        <t>
          The authorization server MUST ensure that access tokens cannot be generated, modified, or
          guessed to produce valid access tokens by unauthorized parties.
        </t>
        <t>
          The client SHOULD request access tokens with the minimal scope and lifetime necessary.
          The authorization server SHOULD take the client identity into account when choosing how
          to honor the requested scope and lifetime, and MAY issue an access token with a less
          rights than requested.
        </t>
      </section>

      <section title='Refresh Tokens'>
        <t>
          Authorization servers MAY issue refresh tokens to web application clients and native
          application clients.
        </t>
        <t>
          Refresh tokens MUST be kept confidential in transit and storage, and shared only among
          the authorization server and the client to whom the refresh tokens were issued. The
          authorization server MUST maintain the binding between a refresh token and the client to
          whom it was issued.
        </t>
        <t>
          The authorization server MUST verify the binding between the refresh token and client
          identity whenever the client identity can be authenticated. When client authentication is
          not possible, the authorization server SHOULD deploy other means to detect refresh token
          abuse.
        </t>
        <t>
          For example, the authorization server could employ refresh token rotation in which a new
          refresh token is issued with every access token refresh response. The previous refresh
          token is invalidated but retained by the authorization server. If a refresh token is
          compromised and subsequently used by both the attacker and the legitimate client, one of
          them will present an invalidated refresh token which will inform the authorization server
          of the breach.
        </t>
        <t>
          The authorization server MUST ensure that refresh tokens cannot be generated, modified,
          or guessed to produce valid refresh tokens by unauthorized parties.
        </t>
      </section>

      <section title='Authorization Codes'>
        <t>
          The transmission of authorization codes SHOULD be made over a secure channel, and the
          client SHOULD implement TLS for use with its redirection URI if the URI identifies a
          network resource. Effort should be made to keep authorization codes confidential. Since
          authorization codes are transmitted via user-agent redirections, they could potentially
          be disclosed through user-agent history and HTTP referrer headers.
        </t>
        <t>
          Authorization codes operate as plaintext bearer credentials, used to verify that the
          resource owner who granted authorization at the authorization server is the same
          resource owner returning to the client to complete the process. Therefore, if the client
          relies on the authorization code for its own resource owner authentication, the client
          redirection endpoint MUST require TLS.
        </t>
        <t>
          Authorization codes MUST be short lived and single use. If the authorization server
          observes multiple attempts to exchange an authorization code for an access token, the
          authorization server SHOULD attempt to revoke all access tokens already granted based on
          the compromised authorization code.
        </t>
        <t>
          If the client can be authenticated, the authorization servers MUST authenticate the
          client and ensure that the authorization code was issued to the same client.
        </t>
      </section>

      <section title='Authorization Code Redirection URI Manipulation'>
        <t>
          When requesting authorization using the authorization code grant type, the client can
          specify a redirection URI via the <spanx style='verb'>redirect_uri</spanx> parameter.
          If an attacker can manipulate the value of the redirection URI, it can cause the
          authorization server to redirect the resource owner user-agent to a URI under the control
          of the attacker with the authorization code.
        </t>
        <t>
          An attacker can create an account at a legitimate client and initiate the authorization
          flow. When the attacker is sent to the authorization server to grant access, the attacker
          grabs the authorization URI provided by the legitimate client, and replaces the client's
          redirection URI with a URI under the control of the attacker. The attacker then tricks
          the victim into following the manipulated link to authorize access to the legitimate
          client.
        </t>
        <t>
          Once at the authorization server, the victim is prompted with a normal, valid request on
          behalf of a legitimate and trusted client, and authorizes the request. The victim is
          then redirected to an endpoint under the control of the attacker with the authorization
          code. The attacker completes the authorization flow by sending the authorization code to
          the client using the original redirection URI provided by the client. The client
          exchanges the authorization code with an access token and links it to the attacker's
          client account which can now gain access to the protected resources authorized by the
          victim (via the client).
        </t>
        <t>
          In order to prevent such an attack, the authorization server MUST ensure that the
          redirection URI used to obtain the authorization code is identical to the redirection URI
          provided when exchanging the authorization code for an access token. The authorization
          server MUST require public clients and SHOULD require confidential clients to register
          their redirection URIs. If a redirection URI is provided in the request, the
          authorization server MUST validate it against the registered value.
        </t>
      </section>

      <section title='Resource Owner Password Credentials'>
        <t>
          The resource owner password credentials grant type is often used for legacy or migration
          reasons. It reduces the overall risk of storing username and password by the client, but
          does not eliminate the need to expose highly privileged credentials to the client.
        </t>
        <t>
          This grant type carries a higher risk than other grant types because it maintains the
          password anti-pattern this protocol seeks to avoid. The client could abuse the password
          or the password could unintentionally be disclosed to an attacker (e.g. via log files or
          other records kept by the client).
        </t>
        <t>
          Additionally, because the resource owner does not have control over the authorization
          process (the resource owner involvement ends when it hands over its credentials to the
          client), the client can obtain access tokens with a broader scope and longer lifetime
          than desired by the resource owner. The authorization server should consider the scope
          and lifetime of access tokens issued via this grant type.
        </t>
        <t>
          The authorization server and client SHOULD minimize use of this grant type and utilize
          other grant types whenever possible.
        </t>
      </section>

      <section title='Request Confidentiality'>
        <t>
          Access tokens, refresh tokens, resource owner passwords, and client credentials MUST NOT
          be transmitted in the clear. Authorization codes SHOULD NOT be transmitted in the clear.
        </t>
      </section>

      <section title='Endpoints Authenticity'>
        <t>
          In order to prevent man-in-the-middle and phishing attacks, the authorization server
          MUST implement and require TLS with server authentication as defined by
          <xref target='RFC2818' /> for any request sent to the authorization and token endpoints.
          The client MUST validate the authorization server's TLS certificate in accordance with
          its requirements for server identity authentication.
        </t>
      </section>

      <section title='Credentials Guessing Attacks'>
        <t>
          The authorization server MUST prevent attackers from guessing access tokens,
          authorization codes, refresh tokens, resource owner passwords, and client credentials.
        </t>
        <t>
          When generating tokens and other credentials not intended for handling by end-users, the
          authorization server MUST use a reasonable level of entropy in order to mitigate the risk
          of guessing attacks. The authorization server MUST utilize other means to protect
          credentials intended for end-user usage.
        </t>
      </section>

      <section title='Phishing Attacks'>
        <t>
          Wide deployment of this and similar protocols may cause end-users to become inured
          to the practice of being redirected to websites where they are asked to enter their
          passwords. If end-users are not careful to verify the authenticity of these websites
          before entering their credentials, it will be possible for attackers to exploit this
          practice to steal resource owners' passwords.
        </t>
        <t>
          Service providers should attempt to educate end-users about the risks phishing attacks
          pose, and should provide mechanisms that make it easy for end-users to confirm the
          authenticity of their sites. Client developers should consider the security implications
          of how they interact with the user-agent (e.g., external, embedded), and the ability of
          the end-user to verify the authenticity of the authorization server.
        </t>
        <t>
          To reduce the risk of phishing attacks, the authorization servers MUST utilize TLS on
          every endpoint used for end-user interaction.
        </t>
      </section>

      <section title='Cross-Site Request Forgery' anchor='CSRF'>
        <t>
          Cross-site request forgery (CSRF) is an exploit in which an attacker causes the
          user-agent of a victim end-user to follow a malicious URI (e.g. provided to the
          user-agent as a misleading link, image, or redirection) to a trusting server (usually
          established via the presence of a valid session cookie).
        </t>
        <t>
          A CSRF attack against the client's redirection URI allows an attacker to inject their own
          authorization code or access token, which can result in the client using an access token
          associated with the attacker's protected resources rather than the victim's (e.g. save
          the victim's bank account information to a protected resource controlled by the
          attacker).
        </t>
        <t>
          The client MUST implement CSRF protection for its redirection URI. This is typically
          accomplished by requiring any request sent to the redirection URI endpoint to include a
          value that binds the request to the user-agent's authenticated state (e.g. a hash of the
          session cookie used to authenticate the user-agent). The client SHOULD utilize the
          <spanx style='verb'>state</spanx> request parameter to deliver this value to the
          authorization server when making an authorization request.
        </t>
        <t>
          Once authorization has been obtained from the end-user, the authorization server
          redirects the end-user's user-agent back to the client with the required binding value
          contained in the <spanx style='verb'>state</spanx> parameter. The binding value enables
          the client to verify the validity of the request by matching the binding value to the
          user-agent's authenticated state. The binding value used for CSRF protection MUST contain
          a non-guessable value, and the user-agent's authenticated state (e.g. session cookie,
          HTML5 local storage) MUST be kept in a location accessible only to the client and the
          user-agent (i.e., protected by same-origin policy).
        </t>
        <t>
          A CSRF attack against the authorization server's authorization endpoint can result in an
          attacker obtaining end-user authorization for a malicious client without involving or
          alerting the end-user.
        </t>
        <t>
          The authorization server MUST implement CSRF protection for its authorization endpoint,
          and ensure that a malicious client cannot obtain authorization without the awareness and
          explicit consent of the resource owner.
        </t>
      </section>

      <section title='Clickjacking'>
        <t>
          In a clickjacking attack, an attacker registers a legitimate client and then constructs a
          malicious site in which it loads the authorization server's authorization endpoint web
          page in a transparent iframe overlaid on top of a set of dummy buttons which are
          carefully constructed to be placed directly under important buttons on the authorization
          page. When an end-user clicks a misleading visible button, the end-user is actually
          clicking an invisible button on the authorization page (such as an "Authorize" button).
          This allows an attacker to trick a resource owner into granting its client access without
          their knowledge.
        </t>
        <t>
          To prevent this form of attack, native applications SHOULD use external browsers instead
          of embedding browsers in an iframe when requesting end-user authorization. For most newer
          browsers, avoidance of iframes can be enforced by the authorization server using the
          (non-standard) <spanx style='verb'>x-frame-options</spanx> header. This header can have
          two values, <spanx style='verb'>deny</spanx> and <spanx style='verb'>sameorigin</spanx>,
          which will block any framing, or framing by sites with a different origin, respectively.
          For older browsers, javascript framebusting techniques can be used but may not be
          effective in all browsers.
        </t>
      </section>

      <section title='Code Injection and Input Validation'>
        <t>
          A code injection attack occurs when an input or otherwise external variable is used by an
          application unsanitized and causes modification to the application logic. This may allow
          an attacker to gain access to the application device or its data, cause denial of
          service, or a wide range of malicious side-effects.
        </t>
        <t>
          The Authorization server and client MUST validate and sanitize any value received, and in
          particular, the value of the <spanx style='verb'>state</spanx> and
          <spanx style='verb'>redirect_uri</spanx> parameters.
        </t>
      </section>

      <section title='Open Redirectors' anchor='open-redirect'>
        <t>
          The authorization server authorization endpoint and the client redirection endpoint can
          be improperly configured and operate as open redirectors. An open redirector is an
          endpoint using a parameter to automatically redirect a user-agent to the location
          specified by the parameter value without any validation.
        </t>
        <t>
          Open redirectors can be used in phishing attacks, or by an attacker to get end-users to
          visit malicious sites by making the URI's authority look like a familiar and trusted
          destination. In addition, if the authorization server allows the client to register only
          part of the redirection URI, an attacker can use an open redirector operated by the
          client to construct a redirection URI that will pass the authorization server validation
          but will send the authorization code or access token to an endpoint under the control of
          the attacker.
        </t>
      </section>

    </section>

    <section title='IANA Considerations'>

      <section title='The OAuth Access Token Type Registry' anchor='type-registry'>
        <t>
          This specification establishes the OAuth access token type registry.
        </t>
        <t>
          Access token types are registered on the advice of one or more Designated Experts
          (appointed by the IESG or their delegate), with a Specification Required (using
          terminology from <xref target='RFC5226' />). However, to allow for the allocation of
          values prior to publication, the Designated Expert(s) may approve registration once they
          are satisfied that such a specification will be published.
        </t>
        <t>
          Registration requests should be sent to the [TBD]@ietf.org mailing list for review and
          comment, with an appropriate subject (e.g., "Request for access token type: example").
          [[ Note to RFC-EDITOR: The name of the mailing list should be determined in consultation
          with the IESG and IANA. Suggested name: oauth-ext-review. ]]
        </t>
        <t>
          Within at most 14 days of the request, the Designated Expert(s) will either approve or
          deny the registration request, communicating this decision to the review list and IANA.
          Denials should include an explanation and, if applicable, suggestions as to how to make
          the request successful.
        </t>
        <t>
          Decisions (or lack thereof) made by the Designated Expert(s) can be first appealed to
          Application Area Directors (contactable using app-ads@tools.ietf.org email address or
          directly by looking up their email addresses on http://www.iesg.org/ website) and, if the
          appellant is not satisfied with the response, to the full IESG (using the iesg@iesg.org
          mailing list).
        </t>
        <t>
          IANA should only accept registry updates from the Designated Expert(s), and should direct
          all requests for registration to the review mailing list.
        </t>

        <section title='Registration Template'>
          <t>
            <list style='hanging'>
              <t hangText='Type name:'>
                <vspace />
                The name requested (e.g., "example").
              </t>
              <t hangText='Additional Token Endpoint Response Parameters:'>
                <vspace />
                Additional response parameters returned together with the
                <spanx style='verb'>access_token</spanx> parameter. New parameters MUST be
                separately registered in the OAuth parameters registry as described by
                <xref target='parameters-registry' />.
              </t>
              <t hangText='HTTP Authentication Scheme(s):'>
                <vspace />
                The HTTP authentication scheme name(s), if any, used to authenticate protected
                resources requests using access tokens of this type.
              </t>
              <t hangText='Change controller:'>
                <vspace />
                For standards-track RFCs, state "IETF". For others, give the name of the
                responsible party. Other details (e.g., postal address, e-mail address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification document(s):'>
                <vspace />
                Reference to the document that specifies the parameter, preferably including a URI that
                can be used to retrieve a copy of the document. An indication of the relevant
                sections may also be included, but is not required.
              </t>
            </list>
          </t>
        </section>

      </section>

      <section title='The OAuth Parameters Registry' anchor='parameters-registry'>
        <t>
          This specification establishes the OAuth parameters registry.
        </t>
        <t>
          Additional parameters for inclusion in the authorization endpoint request, the
          authorization endpoint response, the token endpoint request, or the token endpoint
          response are registered on the advice of one or more Designated Experts (appointed by
          the IESG or their delegate), with a Specification Required (using terminology from
          <xref target='RFC5226' />). However, to allow for the allocation of values prior to
          publication, the Designated Expert(s) may approve registration once they are satisfied
          that such a specification will be published.
        </t>
        <t>
          Registration requests should be sent to the [TBD]@ietf.org mailing list for review and
          comment, with an appropriate subject (e.g., "Request for parameter: example").
          [[ Note to RFC-EDITOR: The name of the mailing list should be determined in consultation
          with the IESG and IANA. Suggested name: oauth-ext-review. ]]
        </t>
        <t>
          Within at most 14 days of the request, the Designated Expert(s) will either approve or
          deny the registration request, communicating this decision to the review list and IANA.
          Denials should include an explanation and, if applicable, suggestions as to how to make
          the request successful.
        </t>
        <t>
          Decisions (or lack thereof) made by the Designated Expert(s) can be first appealed to
          Application Area Directors (contactable using app-ads@tools.ietf.org email address or
          directly by looking up their email addresses on http://www.iesg.org/ website) and, if the
          appellant is not satisfied with the response, to the full IESG (using the iesg@iesg.org
          mailing list).
        </t>
        <t>
          IANA should only accept registry updates from the Designated Expert(s), and should direct
          all requests for registration to the review mailing list.
        </t>

        <section title='Registration Template'>
          <t>
            <list style='hanging'>
              <t hangText='Parameter name:'>
                <vspace />
                The name requested (e.g., "example").
              </t>
              <t hangText='Parameter usage location:'>
                <vspace />
                The location(s) where parameter can be used. The possible locations are:
                authorization request, authorization response, token request, or token response.
              </t>
              <t hangText='Change controller:'>
                <vspace />
                For standards-track RFCs, state "IETF". For others, give the name of the
                responsible party. Other details (e.g., postal address, e-mail address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification document(s):'>
                <vspace />
                Reference to the document that specifies the parameter, preferably including a URI that
                can be used to retrieve a copy of the document. An indication of the relevant
                sections may also be included, but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title='Initial Registry Contents'>
          <t>
            The OAuth Parameters Registry's initial contents are:
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: client_id
              </t>
              <t>
                Parameter usage location: authorization request, token request
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: client_secret
              </t>
              <t>
                Parameter usage location: token request
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: response_type
              </t>
              <t>
                Parameter usage location: authorization request
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: redirect_uri
              </t>
              <t>
                Parameter usage location: authorization request, token request
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: scope
              </t>
              <t>
                Parameter usage location: authorization request, authorization response, token
                request, token response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: state
              </t>
              <t>
                Parameter usage location: authorization request, authorization response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: code
              </t>
              <t>
                Parameter usage location: authorization response, token request
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: error_description
              </t>
              <t>
                Parameter usage location: authorization response, token response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: error_uri
              </t>
              <t>
                Parameter usage location: authorization response, token response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: grant_type
              </t>
              <t>
                Parameter usage location: token request
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: access_token
              </t>
              <t>
                Parameter usage location: authorization response, token response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: token_type
              </t>
              <t>
                Parameter usage location: authorization response, token response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: expires_in
              </t>
              <t>
                Parameter usage location: authorization response, token response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: username
              </t>
              <t>
                Parameter usage location: token request
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: password
              </t>
              <t>
                Parameter usage location: token request
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Parameter name: refresh_token
              </t>
              <t>
                Parameter usage location: token request, token response
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
        </section>

      </section>

      <section title='The OAuth Authorization Endpoint Response Type Registry' anchor='response-type-registry'>
        <t>
          This specification establishes the OAuth authorization endpoint response type registry.
        </t>
        <t>
          Additional response type for use with the authorization endpoint are registered on the
          advice of one or more Designated Experts (appointed by the IESG or their delegate), with
          a Specification Required (using terminology from <xref target='RFC5226' />). However, to
          allow for the allocation of values prior to publication, the Designated Expert(s) may
          approve registration once they are satisfied that such a specification will be published.
        </t>
        <t>
          Registration requests should be sent to the [TBD]@ietf.org mailing list for review and
          comment, with an appropriate subject (e.g., "Request for response type: example").
          [[ Note to RFC-EDITOR: The name of the mailing list should be determined in consultation
          with the IESG and IANA. Suggested name: oauth-ext-review. ]]
        </t>
        <t>
          Within at most 14 days of the request, the Designated Expert(s) will either approve or
          deny the registration request, communicating this decision to the review list and IANA.
          Denials should include an explanation and, if applicable, suggestions as to how to make
          the request successful.
        </t>
        <t>
          Decisions (or lack thereof) made by the Designated Expert(s) can be first appealed to
          Application Area Directors (contactable using app-ads@tools.ietf.org email address or
          directly by looking up their email addresses on http://www.iesg.org/ website) and, if the
          appellant is not satisfied with the response, to the full IESG (using the iesg@iesg.org
          mailing list).
        </t>
        <t>
          IANA should only accept registry updates from the Designated Expert(s), and should direct
          all requests for registration to the review mailing list.
        </t>

        <section title='Registration Template'>
          <t>
            <list style='hanging'>
              <t hangText='Response type name:'>
                <vspace />
                The name requested (e.g., "example").
              </t>
              <t hangText='Change controller:'>
                <vspace />
                For standards-track RFCs, state "IETF". For others, give the name of the
                responsible party. Other details (e.g., postal address, e-mail address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification document(s):'>
                <vspace />
                Reference to the document that specifies the type, preferably including a URI that
                can be used to retrieve a copy of the document. An indication of the relevant
                sections may also be included, but is not required.
              </t>
            </list>
          </t>
        </section>

        <section title='Initial Registry Contents'>
          <t>
            The OAuth Authorization Endpoint Response Type Registry's initial contents are:
          </t>
          <t>
            <list style='symbols'>
              <t>
                Response type name: code
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
          <t>
            <list style='symbols'>
              <t>
                Response type name: token
              </t>
              <t>
                Change controller: IETF
              </t>
              <t>
                Specification document(s): [[ this document ]]
              </t>
            </list>
          </t>
        </section>

      </section>

      <section title='The OAuth Extensions Error Registry' anchor='error-registry'>
        <t>
          This specification establishes the OAuth extensions error registry.
        </t>
        <t>
          Additional error codes used together with other protocol extensions (i.e. extension grant
          types, access token types, or extension parameters) are registered on the advice of one
          or more Designated Experts (appointed by the IESG or their delegate), with a
          Specification Required (using terminology from <xref target='RFC5226' />). However, to
          allow for the allocation of values prior to publication, the Designated Expert(s) may
          approve registration once they are satisfied that such a specification will be published.
        </t>
        <t>
          Registration requests should be sent to the [TBD]@ietf.org mailing list for review and
          comment, with an appropriate subject (e.g., "Request for error code: example").
          [[ Note to RFC-EDITOR: The name of the mailing list should be determined in consultation
          with the IESG and IANA. Suggested name: oauth-ext-review. ]]
        </t>
        <t>
          Within at most 14 days of the request, the Designated Expert(s) will either approve or
          deny the registration request, communicating this decision to the review list and IANA.
          Denials should include an explanation and, if applicable, suggestions as to how to make
          the request successful.
        </t>
        <t>
          Decisions (or lack thereof) made by the Designated Expert(s) can be first appealed to
          Application Area Directors (contactable using app-ads@tools.ietf.org email address or
          directly by looking up their email addresses on http://www.iesg.org/ website) and, if the
          appellant is not satisfied with the response, to the full IESG (using the iesg@iesg.org
          mailing list).
        </t>
        <t>
          IANA should only accept registry updates from the Designated Expert(s), and should direct
          all requests for registration to the review mailing list.
        </t>

        <section title='Registration Template'>
          <t>
            <list style='hanging'>
              <t hangText='Error name:'>
                <vspace />
                The name requested (e.g., "example").
              </t>
              <t hangText='Error usage location:'>
                <vspace />
                The location(s) where the error can be used. The possible locations are:
                authorization code grant error response (<xref target='code-authz-error' />),
                implicit grant error response (<xref target='implicit-authz-error' />), or token
                error response (<xref target='token-errors' />).
              </t>
              <t hangText='Related protocol extension:'>
                <vspace />
                The name of the extension grant type, access token type, or extension parameter,
                the error code is used in conjunction with.
              </t>
              <t hangText='Change controller:'>
                <vspace />
                For standards-track RFCs, state "IETF". For others, give the name of the
                responsible party. Other details (e.g., postal address, e-mail address, home page
                URI) may also be included.
              </t>
              <t hangText='Specification document(s):'>
                <vspace />
                Reference to the document that specifies the error code, preferably including a URI
                that can be used to retrieve a copy of the document. An indication of the relevant
                sections may also be included, but is not required.
              </t>
            </list>
          </t>
        </section>

      </section>

    </section>

    <section title='Acknowledgements'>
      <t>
        The initial OAuth 2.0 protocol specification was edited by David Recordon, based on two
        previous publications: the OAuth 1.0 community specification <xref target='RFC5849' />, and
        OAuth WRAP (OAuth Web Resource Authorization Profiles)
        <xref target='I-D.draft-hardt-oauth-01' />. The Security Considerations section was drafted
        by Torsten Lodderstedt, Mark McGloin, Phil Hunt, and Anthony Nadalin.
      </t>
      <t>
        The OAuth 1.0 community specification was edited by Eran Hammer-Lahav and authored by
        Mark Atwood, Dirk Balfanz, Darren Bounds, Richard M. Conlan, Blaine Cook, Leah Culver,
        Breno de Medeiros, Brian Eaton, Kellan Elliott-McCrea, Larry Halff, Eran Hammer-Lahav,
        Ben Laurie, Chris Messina, John Panzer, Sam Quigley, David Recordon, Eran Sandler,
        Jonathan Sergent, Todd Sieling, Brian Slesinsky, and Andy Smith.
      </t>
      <t>
        The OAuth WRAP specification was edited by Dick Hardt and authored by Brian Eaton,
        Yaron Goland, Dick Hardt, and Allen Tom.
      </t>
      <t>
        This specification is the work of the OAuth Working Group which includes dozens of active
        and dedicated participants. In particular, the following individuals contributed ideas,
        feedback, and wording which shaped and formed the final specification:
      </t>
      <t>
        Michael Adams, Amanda Anganes, Andrew Arnott, Dirk Balfanz, Aiden Bell, Scott Cantor, Marcos Caceres, Blaine Cook, Brian Campbell,
        Brian Eaton, Leah Culver, Bill de hÃ“ra, AndrÃ© DeMarre, Brian Eaton, Brian Ellin, Igor Faynberg,
        George Fletcher, Tim Freeman, Evan Gilbert, Yaron Goland, Brent Goldman,
        Kristoffer Gronowski, Justin Hart, Dick Hardt, Craig Heath, Phil Hunt, Michael B. Jones,
        John Kemp, Mark Kent, Raffi Krikorian, Chasen Le Hara, Rasmus Lerdorf, Torsten Lodderstedt,
        Hui-Lan Lu, Casey Lucas, Paul Madsen, Alastair Mair, Eve Maler, James Manger, Mark McGloin,
        Laurence Miao, Chuck Mortimore, Anthony Nadalin, Justin Richer, Peter Saint-Andre,
        Nat Sakimura, Rob Sayre, Marius Scurtescu, Naitik Shah, Luke Shepard, Vlad Skvortsov,
        Justin Smith, Niv Steingarten, Christian StÃ¼bner, Jeremy Suriel, Paul Tarjan, Allen Tom, Franklin Tse,
        Nick Walker, Shane Weeden, and Skylar Woodward.
      </t>
    </section>

    <appendix title="Editor's Notes">
      <t>
        While many people contributed to this specification throughout its long journey, the editor
        would like to acknowledge and thank a few individuals for their outstanding and invaluable
        efforts leading up to the publication of this specification. It is these individuals without
        whom this work would not have existed or reached its successful conclusion.
      </t>
      <t>
        David Recordon for continuously being one of OAuthâ€™s most valuable assets, bringing
        pragmatism and urgency to the work, and helping shape it from its very beginning, as well
        as being one of the best collaborators I had the pleasure of working with.
      </t>
      <t>
        Mark Nottingham for introducing OAuth to the IETF and setting the community on this course.
        Lisa Dusseault for her support and guidance as the Application area director. Blaine Cook,
        Peter Saint-Andre, and Hannes Tschofenig for their work as working group chairs.
      </t>
      <t>
        James Manger for his creative ideas and always insightful feedback. Brian Campbell,
        Torsten Lodderstedt, Chuck Mortimore, Justin Richer, Marius Scurtescu, and Luke Shepard for
        their continued participation and valuable feedback.
      </t>
      <t>
        Special thanks goes to Mike Curtis and Yahoo! for their unconditional support of this work
        for over three years.
      </t>
    </appendix>

  </middle>

  <back>

    <references title='Normative References'>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2246.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2818.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.4949.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5226.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5234.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5246.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml4/reference.W3C.REC-html401-19991224.xml' ?>

    </references>

    <references title='Informative References'>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5849.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-v2-bearer-08.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-saml2-bearer-08.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-v2-http-mac-00.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-v2-threatmodel-00.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml2/reference.OASIS.saml-core-2.0-os.xml' ?>

      <reference anchor="I-D.draft-hardt-oauth-01">
        <front>
          <title>OAuth Web Resource Authorization Profiles</title>
          <author initials="D" surname="Hardt" fullname="Dick Hardt" role="editor" />
          <author initials="A" surname="Tom" fullname="Allen Tom" />
          <author initials="B" surname="Eaton" fullname="Brian Eaton" />
          <author initials="Y" surname="Goland" fullname="Yaron Goland" />
          <date month="January" day="15" year="2010" />
        </front>
        <format type="TXT" target="http://www.ietf.org/internet-drafts/draft-hardt-oauth-01.txt" />
      </reference>

    </references>

  </back>

</rfc>
