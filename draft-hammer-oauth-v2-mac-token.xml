<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE rfc SYSTEM 'rfc2629.dtd'>
<?xml-stylesheet type='text/xsl' href='rfc2629.xslt' ?>

<rfc category='std' ipr='trust200902' docName='draft-hammer-oauth-v2-mac-token-00'>
  <?rfc strict='yes' ?>
  <?rfc toc='yes' ?>
  <?rfc tocdepth='3' ?>
  <?rfc symrefs='yes' ?>
  <?rfc sortrefs='yes' ?>
  <?rfc compact='yes' ?>
  <?rfc subcompact='no' ?>

  <front>
    <title abbrev='OAuth 2.0 MAC Token'>OAuth 2.0 MAC Token and Authentication</title>

    <author fullname='Eran Hammer-Lahav' surname='Hammer-Lahav' initials='E'>
      <organization>Yahoo!</organization>
      <address>
        <email>eran@hueniverse.com</email>
        <uri>http://hueniverse.com</uri>
      </address>
    </author>

    <date year='2011'/>

    <abstract>
      <t>
        This document specifies the OAuth 2.0 MAC token type and authentication scheme.
      </t>
    </abstract>

    <note>
      Please discuss this draft on the
      <eref target='https://www.ietf.org/mailman/listinfo/oauth'>oauth@ietf.org</eref> mailing
      list.
    </note>
  </front>

  <middle>

    <section title='Introduction'>
      <t>
        OAuth 2.0 (<xref target='I-D.ietf-oauth-v2' />) defines a token-based authentication
        framework in which third-party applications (clients) access protected resources using
        access tokens. Access tokens are obtained via the resource owners' authorization from an
        authorization server.
      </t>
      <t>
        This specification defines the MAC token type for use with the OAuth 2.0 framework. It
        defines type-specific token attributes and provides a method for making authenticated HTTP
        requests with partial cryptographic verification of the request - covering the HTTP
        method, request URI, host, and in some cases the request body.
      </t>
      <t>
        This specification does not define methods for the client to specifically request a
        MAC-type token from the authorization server. Additionally, it does not include any
        discovery facilities for identifying which token types are supported by a resource server
        or how the client may go about obtaining access tokens. This specification assumes that the
        authorization server has issued the client a MAC-type token and describes how the client
        authenticates using that access token.
      </t>
      <t>
        The MAC token type is based on the <spanx style='verb'>HMAC-SHA1</spanx> signature method
        defined in <xref target='RFC5849'>OAuth 1.0</xref>. However, the two schemes are not
        compatible.
      </t>
      <t>
        This specification is an extension of <xref target='I-D.ietf-oauth-v2' /> and uses its
        terminology.
      </t>

      <section title='Example'>
        <figure>
          <preamble>
            The client attempts to access a protected resource without authentication, making the
            following HTTP request to the resource server:
          </preamble>
          <artwork>
            <![CDATA[
  GET /resource/1?b=1&a=2 HTTP/1.1
  Host: example.com
]]>
          </artwork>
        </figure>
        <figure>
          <preamble>
            The resource server returns the following authentication challenge:
          </preamble>
          <artwork>
            <![CDATA[
  HTTP/1.1 401 Unauthorized
  WWW-Authenticate: OAuth2
  Date: Thu, 02 Dec 2010 21:39:45 GMT
]]>
          </artwork>
        </figure>
        <t>
          The client has previously obtained a set of token credentials for accessing resources on
          the <spanx style='verb'>http://example.com/</spanx> resource server. The credentials issued to the
          client by the authorization server included the following attributes:

          <list style='hanging' hangIndent='6'>
            <t hangText='Access token:'>h480djs93hd8</t>
            <t hangText='Token type:'>mac</t>
            <t hangText='MAC algorithm:'>hmac-sha-1</t>
            <t hangText='Token secret:'>489dks293j39</t>
          </list>
        </t>
        <t>
          The client attempts the HTTP request again, this time using the token credentials
          issued by the authorization server earlier to authenticate. To construct the
          authentication header, the client calculates the current timestamp and a nonce. The nonce
          is unique to the timestamp used, typically a random string:

          <list style='hanging' hangIndent='6'>
            <t hangText='Timestamp:'>137131200</t>
            <t hangText='Nonce:'>dj83hs9s</t>
          </list>
        </t>
        <t>
          The client normalizes the request and constructs the signature base string (the newline
          seperator character is represented by <spanx style='verb'>\n</spanx> for display purposes
          only):
        </t>
        <figure>
          <artwork>
            <![CDATA[
  h480djs93hd8\n
  137131200\n
  dj83hs9s\n
  GET\n
  example.com\n
  80\n
  /resource/1\n
  a=2\n
  b=1
]]>
          </artwork>
        </figure>
        <t>
          The signature base string is signed using the specified MAC token algorithm
          <spanx style='verb'>hmac-sha-1</spanx> with the signature base string as text and the
          token secret as key. The resulting digest is base64-encoded to produce the request
          signature:
        </t>
        <figure>
          <artwork>
            <![CDATA[
  IdSrHQHTwCPWGrqzGGIR791ZJXE=
]]>
          </artwork>
        </figure>
        <t>
          The client includes the access token, timestamp, nonce, and signature with the request
          using the <spanx style='verb'>Authorization</spanx> request header field:
        </t>
        <figure>
          <artwork>
            <![CDATA[
  GET /resource/1 HTTP/1.1
  Host: example.com
  Authorization: MAC token='h480djs93hd8',
                     timestamp='137131200',
                     nonce='dj83hs9s',
                     signature='IdSrHQHTwCPWGrqzGGIR791ZJXE='
]]>
          </artwork>
        </figure>
        <t>
          The resource server validates the request by calculating the signature again based on the
          request received and verifies the validity and scope of the access token. If valid, the
          resource server responds with the requested protected resource representation.
        </t>
      </section>

      <section title='Notational Conventions'>
        <t>
          The key words 'MUST', 'MUST NOT', 'REQUIRED', 'SHALL', 'SHALL NOT', 'SHOULD', 'SHOULD NOT',
          'RECOMMENDED', 'MAY', and 'OPTIONAL' in this document are to be interpreted as described in
          <xref target='RFC2119' />.
        </t>
        <t>
          This document uses the Augmented Backus-Naur Form (ABNF) notation of
          <xref target='I-D.ietf-httpbis-p1-messaging' />. Additionally, the following rules are
          included from <xref target='RFC2617' />: realm, auth-param.
        </t>
      </section>

    </section>

    <section title='Issuing MAC-Type Access Tokens' anchor='issue'>
      <t>
        Authorization servers issuing MAC-type access tokens MUST include the following parameters
        whenever a response includes the <spanx style='verb'>access_token</spanx> parameter:

        <list style='hanging' hangIndent='6'>
          <t hangText='secret'>
            <vspace />
            REQUIRED. The token shared secret used as the MAC algorithm key.
          </t>
          <t hangText='algorithm'>
            <vspace />
            REQUIRED. The MAC algorithm used to calculate the request signature. Value MUST be one
            of <spanx style='verb'>hmac-sha-1</spanx>, <spanx style='verb'>hmac-sha-256</spanx>, or
            a registered extension algorithm name as described in <xref target='extensions' />.
          </t>
        </list>
      </t>
    </section>

    <section title='Making Requests' anchor='requests'>
      <t>
        To make authenticated requests, the client must be in possession of a valid MAC-type access
        token, issued by an authorization server accepted by the resource server. The client
        constructs the request by calculating of a set of attributes, and adding them to the HTTP
        request using the <xref target='authz_header'>Authorization header field</xref>.
        Authenticated request can be sent in response to an authentication challenge or directly.
      </t>

      <section title='The Authorization Request Header' anchor='authz_header'>
        <t>
          The <spanx style='verb'>Authorization</spanx> request header field uses the framework
          defined by <xref target='RFC2617' /> as follows:
        </t>
        <figure>
          <artwork>
            <![CDATA[
  credentials    = 'MAC' [ RWS 1#param ]
  
  param          = access-token /
                   timestamp /
                   nonce /
                   signature

  access-token   = 'token' '=' quoted-string
  timestamp      = 'timestamp' '=' <"> 1*DIGIT <">
  nonce          = 'nonce' '=' quoted-string
  signature      = 'signature' '=' quoted-string
]]>
          </artwork>
        </figure>

        <t>
          The <spanx style='verb'>token</spanx> attribute value is set to the access token received
          from the authorization server.
        </t>
        <t>
          The <spanx style='verb'>timestamp</spanx> attribute value is set to the current time
          expressed in the number of seconds since January 1, 1970 00:00:00 GMT, and MUST be a
          positive integer.
        </t>
        <t>
          The <spanx style='verb'>nonce</spanx> attribute value is set to a random string, uniquely
          generated by the client to allow the resource server to verify that a request has never
          been made before and helps prevent replay attacks when requests are made over an insecure
          channel.  The nonce value MUST be unique across all requests with the same timestamp and
          access token combination.
        </t>
        <t>
          To avoid the need to retain an infinite number of nonce values for future checks, servers
          MAY choose to restrict the time period after which a request with an old timestamp is
          rejected.  Such a restriction implies a level of synchronization between the client's and
          server's clocks. The client MAY use the <spanx style='verb'>Date</spanx> response header
          field to synchronize its clock after a failed request.
        </t>
        <t>
          The <spanx style='verb'>signature</spanx> attribute value is set as described in
          <xref target='signature' />.
        </t>
      </section>

      <section title='Siganture' anchor='signature'>
        <t>
          The client uses the MAC token algorithm and the access token secret - both provided by
          the authorization server - to calculate the request signature. This specification defines
          two algorithms: <spanx style='verb'>hmac-sha-1</spanx> and
          <spanx style='verb'>hmac-sha-256</spanx>, and provides an extension registry for
          additional algorithms.
        </t>

        <section title='hmac-sha-1'>
          <t>
            <spanx style='verb'>hmac-sha-1</spanx> uses the HMAC-SHA1 algorithm as defined in
            <xref target='RFC2104' />:

            <figure>
              <artwork>
                <![CDATA[
  digest = HMAC-SHA1 (key, text)
]]>
              </artwork>
            </figure>
          </t>
          <t>
            Where:

            <list style='hanging' hangIndent='6'>
              <t hangText='text'>
                <vspace />
                is set to the value of the normalize request string as described in
                <xref target='coverage' />.
              </t>
              <t hangText='key'>
                <vspace />
                is set to the access token shared-secret provided by the authorization server.
              </t>
              <t hangText='digest'>
                <vspace />
                is used to set the value of the <spanx style='verb'>signature</spanx> attribute,
                after the result octet string is base64-encoded per <xref target='RFC2045' />
                section 6.8.
              </t>
            </list>
          </t>
        </section>

        <section title='hmac-sha-256'>
          <t>
            <spanx style='verb'>hmac-sha-1</spanx> uses the HMAC algorithm as defined in
            <xref target='RFC2104' /> together with the SHA-256 hash function defined in
            <xref target='NIST FIPS-180-3' />:

            <figure>
              <artwork>
                <![CDATA[
  digest = HMAC-SHA256 (key, text)
]]>
              </artwork>
            </figure>
          </t>
          <t>
            Where:

            <list style='hanging' hangIndent='6'>
              <t hangText='text'>
                <vspace />
                is set to the value of the normalize request string as described in
                <xref target='coverage' />.
              </t>
              <t hangText='key'>
                <vspace />
                is set to the access token shared-secret provided by the authorization server.
              </t>
              <t hangText='digest'>
                <vspace />
                is used to set the value of the <spanx style='verb'>signature</spanx> attribute,
                after the result octet string is base64-encoded per <xref target='RFC2045' />
                section 6.8.
              </t>
            </list>
          </t>
        </section>

        <section title='String Construction' anchor='base_string'>
          <t>
            The normalized request string is constructed by concatenating together, in order, the
            following HTTP request elements:

            <list style='numbers'>
              <t>
                The HTTP request method in uppercase. For example: <spanx style='verb'>HEAD</spanx>,
                <spanx style='verb'>GET</spanx>, <spanx style='verb'>POST</spanx>, etc.
              </t>
              <t>
                A <spanx style='verb'>,</spanx> character (ASCII code 44).
              </t>
              <t>
                The hostname, colon-separated (ASCII code 58) from the TCP port used to make the
                request as included in the HTTP request <spanx style='verb'>Host</spanx> header
                field. The port MUST be included even if it is not included in the
                <spanx style='verb'>Host</spanx> header field (i.e. the default port for the
                scheme).
              </t>
              <t>
                A <spanx style='verb'>,</spanx> character (ASCII code 44).
              </t>
              <t>
                Any authentication attribute, with the exception of the <spanx style='verb'>auth</spanx>,
                which is assigned a value (including default values), are added to the normalized
                request string as follows:

                <list style='numbers'>
                  <t>
                    The name of each parameter is concatenated to its corresponding value using an
                    <spanx style='verb'>=</spanx> character (ASCII code 61) as separator, even if the
                    value is empty.
                  </t>
                  <t>
                    The name/value pairs are sorted using ascending byte value ordering.
                  </t>
                  <t>
                    The sorted name/value pairs are concatenated together into a single string by
                    using a <spanx style='verb'>,</spanx> character (ASCII code 44) as separator.
                  </t>
                </list>
              </t>
              <t>
                A <spanx style='verb'>,</spanx> character (ASCII code 44).
              </t>
              <t>
                The request resource URI.
              </t>
            </list>
          </t>
        </section>

      </section>

    </section>

    <section title='Verifying Requests' anchor='verify_request'>
      <t>
        A servers receiving an authenticated request validates it by performing the following
        REQUIRED steps:

        <list style='numbers'>
          <t>
            Verify that the token used by the client as well as the coverage method matches the
            server's requirements.
          </t>
          <t>
            If the client used a coverage method other than <spanx style='verb'>none</spanx>,
            construct the normalized request string based on the selected coverage as described in
            <xref target='coverage' />.
          </t>
          <t>
            If the client used an authentication method other than <spanx style='verb'>none</spanx>,
            recalculate the value of the <spanx style='verb'>auth</spanx> attribute as described in
            <xref target='methods' /> and compare it to the value received from the client via
            the <spanx style='verb'>auth</spanx> attribute.
          </t>
          <t>
            If the client used a coverage method other than <spanx style='verb'>none</spanx>,
            ensure that the combination of nonce, timestamp, and token received from the client has
            not been used before in a previous request (the server MAY reject requests with stale
            timestamps; the determination of staleness is left up to the server to define).
          </t>
          <t>
            Verify the scope and status of the client credentials as represented by the token.
          </t>
        </list>
      </t>
      <t>
        If the request fails verification, the server SHOULD respond with an HTTP 401 (unauthorized)
        status code, and SHOULD include a token scheme authentication challenge using the
        <xref target='error_header'>WWW-Authenticate header field</xref>. The server MAY include
        further details about why the request was rejected using the
        <xref target='error_header'>Authorization-Error header field</xref>.
      </t>
    </section>

    <section title='Scheme Extensions'>
      <t>
      </t>
    </section>

    <section title='Security Considerations' anchor='Security'>
      <t>
        As stated in <xref target='RFC2617' />, the greatest sources of risks are usually found not
        in the core protocol itself but in policies and procedures surrounding its use. Implementers
        are strongly encouraged to assess how this protocol addresses their security requirements.
      </t>

      <section title='Credentials Transmission'>
        <t>
          This specification does not describe any mechanism for obtaining or transmitting raw
          tokens credentials. Methods used to obtain tokens should ensure that these transmissions
          are protected using transport-layer mechanisms such as TLS or SSL.
        </t>
      </section>

      <section title='Confidentiality of Requests'>
        <t>
          While this protocol provides a mechanism for verifying the integrity of requests, it
          provides no guarantee of request confidentiality. Unless further precautions are taken,
          eavesdroppers will have full access to request content. Servers should carefully consider
          the kinds of data likely to be sent as part of such requests, and should employ
          transport-layer security mechanisms to protect sensitive resources.
        </t>
      </section>

      <section title='Spoofing by Counterfeit Servers'>
        <t>
          This protocol makes no attempt to verify the authenticity of the server. A hostile party
          could take advantage of this by intercepting the client's requests and returning
          misleading or otherwise incorrect responses. Service providers should consider such
          attacks when developing services using this protocol, and should require transport-layer
          security for any requests where the authenticity of the server or of request responses is
          an issue.
        </t>
      </section>

      <section title='Plaintext Storage of Credentials'>
        <t>
          When used with a symmetric shared-secret authentication method, the token shared-secret
          function the same way passwords do in traditional authentication systems. In order to
          compute the signatures used in methods, the server must have access to these secrets in
          plaintext form. This is in contrast, for example, to modern operating systems, which
          store only a one-way hash of user credentials.
        </t>
        <t>
          If an attacker were to gain access to these secrets - or worse, to the server's database
          of all such secrets - he or she would be able to perform any action on behalf of any
          resource owner. Accordingly, it is critical that servers protect these secrets from
          unauthorized access.
        </t>
      </section>

      <section title='Scoping of Access Requests'>
        <t>
          By itself, this protocol does not provide any method for scoping the access rights
          granted to a client. However, most applications do require greater granularity of access
          rights. For example, servers may wish to make it possible to grant access to some
          protected resources but not others, or to grant only limited access (such as read-only
          access) to those protected resources.
        </t>
        <t>
          When implementing this protocol, servers should consider the types of access resource
          owners may wish to grant clients, and should provide mechanisms to do so. Servers should
          also take care to ensure that resource owners understand the access they are granting, as
          well as any risks that may be involved.
        </t>
      </section>

      <section title='Entropy of Secrets'>
        <t>
          Unless a transport-layer security protocol is used, eavesdroppers will have full access
          to authenticated requests and signatures, and will thus be able to mount offline brute-force
          attacks to recover the credentials used. Servers should be careful to assign
          shared-secrets which are long enough, and random enough, to resist such attacks for at
          least the length of time that the shared-secrets are valid.
        </t>
        <t>
          For example, if shared-secrets are valid for two weeks, servers should ensure that it is
          not possible to mount a brute force attack that recovers the shared-secret in less than
          two weeks. Of course, servers are urged to err on the side of caution, and use the longest
          secrets reasonable.
        </t>
        <t>
          It is equally important that the pseudo-random number generator (PRNG) used to generate
          these secrets be of sufficiently high quality. Many PRNG implementations generate number
          sequences that may appear to be random, but which nevertheless exhibit patterns or other
          weaknesses which make cryptanalysis or brute force attacks easier. Implementers should be
          careful to use cryptographically secure PRNGs to avoid these problems.
        </t>
      </section>

      <section title='Denial of Service / Resource Exhaustion Attacks'>
        <t>
          This specification includes a number of features which may make resource exhaustion
          attacks against servers possible. For example, this protocol requires servers to track
          used nonces. If an attacker is able to use many nonces quickly, the resources required to
          track them may exhaust available capacity. And again, this protocol can require servers
          to perform potentially expensive computations in order to verify the signature on
          incoming requests. An attacker may exploit this to perform a denial of service attack by
          sending a large number of invalid requests to the server.
        </t>
        <t>
          Resource Exhaustion attacks are by no means specific to this specification. However,
          implementers should be careful to consider the additional avenues of attack that this
          protocol exposes, and design their implementations accordingly. For example, entropy
          starvation typically results in either a complete denial of service while the system
          waits for new entropy or else in weak (easily guessable) secrets. When implementing this
          protocol, servers should consider which of these presents a more serious risk for their
          application and design accordingly.
        </t>
      </section>

      <section title='Coverage Limitations'>
        <t>
          The normalized request string has been designed to support the authentication methods
          defined in this specification. Those designing additional methods, should evaluated the
          compatibility of the normalized request string with their security requirements.
          Since the normalized request string does not cover the entire HTTP request, servers
          should employ additional mechanisms to protect such elements.
        </t>
      </section>

    </section>

    <section title='IANA Considerations' anchor='IANA'>

      <section title='The "secret" OAuth Parameter'>
        <t>
          The following is the parameter registration request for the
          <spanx style='verb'>scope</spanx> parameter as defined in this specification:

          <list style='hanging'>
            <t hangText='Parameter name:'>
              scope
            </t>
            <t hangText='Parameter usage location:'>
              The end-user authorization endpoint request, the end-user authorization endpoint
              response, the token endpoint request, the token endpoint response, and the
              <spanx style='verb'>WWW-Authenticate</spanx> header field.
            </t>
            <t hangText='Change controller:'>
              IETF
            </t>
            <t hangText='Specification document(s):'>
              [[ this document ]]
            </t>
            <t hangText='Related information:'>
              None
            </t>
          </list>
        </t>
      </section>

    </section>

    <section title='Acknowledgments'>
      <t>
        The author would like to thank [[ some people ]] for their suggestions, feedback, and
        continued support.
      </t>
    </section>

    <appendix title='Document History' anchor='history'>
      <t>
        [[ To be removed by the RFC editor before publication as an RFC. ]]
      </t>
      <t>
        -00

        <list style='symbols'>
          <t>
            Initial draft.
          </t>
        </list>
      </t>
    </appendix>

  </middle>

  <back>

    <references title='Normative References'>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2045.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2104.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.2617.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.3447.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-httpbis-p1-messaging-08.xml' ?>
      <?rfc include='http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-oauth-v2-11.xml' ?>

      <reference anchor='NIST FIPS-180-3'>
        <front>
          <title>Secure Hash Standard (SHS). FIPS PUB 180-3, October 2008</title>
          <author>
            <organization>National Institute of Standards and Technology</organization>
          </author>
        </front>
        <format type='pdf' target='http://csrc.nist.gov/publications/fips/fips180-3/fips180-3_final.pdf' />
      </reference>

    </references>

    <references title='Informative References'>

      <?rfc include='http://xml.resource.org/public/rfc/bibxml/reference.RFC.5849.xml' ?>

    </references>
  </back>

</rfc>